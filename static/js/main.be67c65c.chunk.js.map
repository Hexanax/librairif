{"version":3,"sources":["services/sparqlRequests.js","components/BookResult.js","components/AuthorResult.js","components/Results.js","components/SearchPage.js","components/Browser.js","themes/lightTheme.js","components/CardResult.js","components/Books.js","components/Editor.js","components/Timeline.js","components/FamilyTree.js","components/Author.js","components/Navbar.js","components/ScrollToTop.js","App.js","reportWebVitals.js","index.js"],"names":["encodeResource","resourceURI","replace","fetchBookInfo","a","book","content","axiosQuery","fetchListInSeries","currentBook","query","join","fetchSameGenreBooks","response","shuffled","sort","Math","random","selected","slice","fetchEditorInfo","editorName","editorRsrc","fetchEditorBooks","editor","fetchRelatedEditors","fetchBookNeighbor","fetchAssociatedGames","name","author","fetchAssociatedMovies","fetchAssociatedMusicals","fetchAssociatedTVShow","fetchAssociatedMusics","queryAuthor","authorURI","queryAuthorAdvancedInfo","fetchBookAssociatedToAuthor","getAuthorTimeLife","currentAuthor","getAuthorInspiration","isInspiratedBy","getRelatedAuthor","filtre","getFamilyTree","researchQuery","limit","getLiteraryGenre","getCountry","getHypernym","getAuthors","getNationality","autocompleteQuery","text","getBookSearch","resultSet","Set","Promise","all","then","result","forEach","add","Array","from","b","authorNames","value","toUpperCase","includes","getAuthorSearch","config","params","format","resolve","reject","axios","get","data","results","bindings","catch","err","console","error","BookResult","bookCover","index","navigate","img","CardMedia","component","image","alt","sx","borderRadius","height","width","filter","Box","pt","pr","pl","backgroundColor","display","flexDirection","alignItems","textAlign","Typography","gutterBottom","variant","color","textOverflow","title","Grid","onClick","bookURI","state","redirect","item","elevation","CardActionArea","CardContent","releaseDate","dateFormat","date","split","AuthorResult","resetState","authorCover","birthDate","deathDate","Results","type","useNavigate","length","container","spacing","direction","justifyContent","map","obj","bookData","imageUrl","authorData","writer","SearchPage","useState","searchResults","setSearchResults","viewableResults","setViewableResults","offset","setOffset","isLoading","setIsLoading","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","handleSubmit","event","preventDefault","FormData","currentTarget","searchInput","searchType","bookResponse","authorResponse","open","setOpen","options","setOptions","setValue","inputValue","setInputValue","highlightedOption","setHighlightedOption","React","setSearchType","loading","handleInputChange","target","handleChange","newValue","queryText","undefined","handleKeyDown","key","defaultMuiPrevented","useEffect","onSubmit","noValidate","mt","Autocomplete","freeSolo","margin","required","fullWidth","id","disableClearable","onInputChange","newInputValue","onChange","onKeyDown","onHighlightChange","option","border","boxSizing","boxShadow","onOpen","onClose","localeCompare","groupBy","getOptionLabel","renderInput","TextField","label","InputProps","endAdornment","CircularProgress","size","renderOption","props","matches","match","parts","parse","part","style","fontWeight","highlight","ToggleButtonGroup","exclusive","newSearchType","ToggleButton","Button","endIcon","mb","flexWrap","bgcolor","dataLength","next","hasMore","loader","endMessage","Browser","minHeight","minWidth","marginTop","ml","mr","maxWidth","lightTheme","palette","primary","main","dark","secondary","typography","h5","fontFamily","h4","h1","fontSize","h2","h3","h6","button","subtitle1","subtitle2","body1","body2","caption","overline","CardResult","subtitle","secondaryTitle","Books","useParams","bookInfo","setBookInfo","isLoadingSupp","setIsLoadingSupp","setError","errorSupp","setErrorSupp","associatedGames","setAssociatedGames","associatedMovies","setAssociatedMovies","associatedMusicals","setAssociatedMusicals","associatedTVShows","setAssociatedTVShows","associatedMusics","setAssociatedMusics","seriesOfBook","setSeriesOfBook","neighbors","setNeighbors","sameGenreBooks","setSameGenreBooks","sameAuthorBooks","setSameAuthorBooks","loadBookInfo","abstract","authorName","publishersURI","publishers","releaseDates","genres","imageURL","loadAssociatedSeriesOfBook","loadBookNeighbors","loadSameGenreBooks","load","loadAssociatedWork","responseBook","authorBooks","games","movies","musicals","tvShows","musics","className","IconButton","aria-label","to","src","publisher","titleOrig","genre","game","window","developerName","movie","producersName","seconds","runtime","Date","toISOString","substr","thumbnail","musical","lyricistName","composerName","tvShow","serie","season","music","artistName","Editor","editorInfo","setEditorInfo","editorBooks","setEditorBooks","relatedEditors","setRelatedEditors","editorURI","loadEditorInfo","loadEditorBooks","loadRelatedEditors","homepages","href","countries","foundation","founders","founder","editorsData","render","TimelineElement","Timeline","position","TimelineItem","TimelineOppositeContent","TimelineSeparator","TimelineDot","TimelineConnector","TimelineContent","work","containerStyles","Card","nodeData","attributes","FamilyTree","translateX","setTranslateX","translateY","setTranslateY","treeContainer","useRef","dimensions","getBoundingClientRect","spouse","family","children","child","push","dataTree","ref","tc","collapsible","translate","x","y","scaleExtent","min","max","allowForeignObjects","pathFunc","orientation","nodeSvgShape","shape","nodeSize","e","onMouseOver","nodeLabelComponent","foreignObjectWrapper","background","toString","Author","authorInfo","setAuthorInfo","advancedInfo","setAdvancedInfo","relatedAuthor","setRelatedAuthor","setFamily","listAwards","setListAwards","listGenres","setListGenres","listOccupation","setListOccupation","authorTimeline","setAuthorTimeline","listInterest","setListInterest","listNotableIdea","setListNotableIdea","listPhilosophicalSchool","setListPhilosophicalSchool","listAcademicDiscipline","setListAcademicDiscipline","books","setBooks","loadAuthorInfo","responseAdvanced","authorInspiredBy","authorInfluenced","occupation","mainInterest","notableIdea","philosophicalSchool","academicDiscipline","loadAdvancedInfo","timeline","notableWorkName","works","dates","i","notableWork","loadTimeline","movement","loadRelatedAuthors","loadFamilyTree","description","nationality","award","education","term","Navbar","gridTemplateColumns","paddingLeft","cursor","justifySelf","ScrollToTop","pathname","useLocation","scrollTo","App","theme","createTheme","ThemeProvider","CssBaseline","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","rel","crossOrigin","document","getElementById"],"mappings":"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","file":"static/js/main.be67c65c.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n/**\r\n * Allows to encode the URI\r\n * @param {String} resourceURI the URI to encode\r\n * @returns the encoded URI\r\n */\r\nfunction encodeResource(resourceURI) {\r\n  resourceURI = resourceURI.replace(/[(]/g, \"\\\\(\");\r\n  resourceURI = resourceURI.replace(/[)]/g, \"\\\\)\");\r\n  resourceURI = resourceURI.replace(/[']/g, \"\\\\'\");\r\n  resourceURI = resourceURI.replace(/[\"]/g, `\\\\\"`);\r\n\r\n  return resourceURI;\r\n}\r\n\r\n/**\r\n * Returns from DBPedia the general information of a book : his name, description, image,\r\n * title, author, publishers, release date, genre\r\n * These information are to be displayed on a book's page \r\n * @param {String} resourceURI the book URI\r\n * @returns the general information of a book\r\n */\r\nexport async function fetchBookInfo(resourceURI) {\r\n  resourceURI = encodeResource(resourceURI);\r\n  const book = `dbr:${resourceURI}`;\r\n  const content = `SELECT ?name ?titleOrig ?imageURL ?abstract ?authorURI ?authorName\r\n    (GROUP_CONCAT(DISTINCT ?publisherURI;   SEPARATOR=\", \") AS ?publishersURI)\r\n    (GROUP_CONCAT(DISTINCT ?publisher;   SEPARATOR=\", \") AS ?publishers)\r\n    (GROUP_CONCAT(DISTINCT ?releaseDate;   SEPARATOR=\", \") AS ?releaseDates)\r\n    (GROUP_CONCAT(DISTINCT ?genre;   SEPARATOR=\", \") AS ?genres)\r\n        WHERE {\r\n            ${book} dbp:name ?name;\r\n            dbo:abstract ?abstract.\r\n            OPTIONAL{${book} dbp:titleOrig ?titleOrig.}\r\n            OPTIONAL{${book} dbp:releaseDate ?releaseDate.}\r\n            OPTIONAL{${book} dbo:thumbnail ?imageURL.}\r\n            OPTIONAL{${book} dbo:literaryGenre ?genreURI.\r\n            ?genreURI rdfs:label ?genre.\r\n            FILTER(lang(?genre)=\"en\")}\r\n            OPTIONAL{${book} dbp:publisher ?publisherURI.\r\n            ?publisherURI rdfs:label ?publisher.\r\n            FILTER(lang(?publisher)=\"en\")}\r\n            OPTIONAL{${book} dbp:author ?authorURI.}\r\n            OPTIONAL{?authorURI dbp:name ?authorName.}\r\n            FILTER(lang(?abstract) = \"en\")\r\n        }`;\r\n  //console.log(content);\r\n  return await axiosQuery(content);\r\n}\r\n\r\n/**\r\n * Allows to get the list of book associated with the current on if\r\n * it is in a series of book Uri of the current book\r\n * @param {*} ressourceURI\r\n */\r\nexport async function fetchListInSeries(resourceURI) {\r\n  resourceURI = encodeResource(resourceURI);\r\n  const currentBook = `dbr:${resourceURI}`;\r\n  let query = [\r\n    `Select ?bookUri ?serie ?name ?imageURL WHERE {\r\n        ${currentBook} dbo:series ?serie.\r\n        ?bookUri a dbo:Book;\r\n        dbp:name ?name;\r\n        dbo:series ?serie.\r\n        OPTIONAL{?bookUri dbo:thumbnail ?imageURL}\r\n        }`,\r\n  ].join(\"\");\r\n  return await axiosQuery(query);\r\n}\r\n\r\n/**\r\n * Fetches the list of books having the same literary genre than the one provided in parameter by its URI\r\n * @param resourceURI\r\n * @returns {Promise<*>} The books with their name and optional image URL\r\n */\r\nexport async function fetchSameGenreBooks(resourceURI) {\r\n  resourceURI = encodeResource(resourceURI);\r\n  const currentBook = `dbr:${resourceURI}`;\r\n  let query = [\r\n    `Select ?book ?genre ?name ?imageUrl\r\n    (GROUP_CONCAT(DISTINCT ?authorName;   SEPARATOR=\", \") AS ?authorNames)\r\n    (MAX(?releaseDate) AS ?releaseDate)\r\n        WHERE {\r\n        ${currentBook} dbo:literaryGenre ?genre.\r\n        ?book a dbo:Book;\r\n        dbp:name ?name;\r\n        dbp:author ?author;\r\n        dbo:literaryGenre ?genre.\r\n        ?author dbp:name ?authorName.\r\n        OPTIONAL {?book dbp:releaseDate ?releaseDate.}\r\n        OPTIONAL{?book dbo:thumbnail ?imageUrl}\r\n        OPTIONAL{?book dbp:author ?authorURI.}\r\n        }`,\r\n  ].join(\"\");\r\n  const response = await axiosQuery(query);\r\n  const shuffled = response.sort(() => 0.5 - Math.random());\r\n  let selected = shuffled.slice(0, 5);\r\n  //console.log(selected);\r\n  return selected;\r\n}\r\n\r\n/**\r\n * Returns from DBPedia the general information of an editor : their name, abstract, image, country\r\n * foundation year, their website and a list of their founders\r\n * These information are to be displayed on an editor's page \r\n * @param {String} authorURI \r\n * @returns the general information of an editor\r\n */\r\nexport async function fetchEditorInfo(editorName) {\r\n  editorName = encodeResource(editorName);\r\n  let editorRsrc = `dbr:${editorName}`;\r\n  let query = `SELECT ?label ?abstract\r\n    (GROUP_CONCAT(DISTINCT ?year;   SEPARATOR=\", \") AS ?foundation)\r\n    (GROUP_CONCAT(DISTINCT ?imageUrl;   SEPARATOR=\", \") AS ?imageURL)\r\n    (GROUP_CONCAT(DISTINCT ?founder;   SEPARATOR=\", \") AS ?founders)\r\n    (GROUP_CONCAT(DISTINCT ?homepage;    SEPARATOR=\", \") AS ?homepages)\r\n    (GROUP_CONCAT(DISTINCT ?country; SEPARATOR=\", \") AS ?countries) WHERE {\r\n      ${editorRsrc} rdfs:label ?label;\r\n      dbo:abstract ?abstract.\r\n      OPTIONAL{${editorRsrc} dbo:founder ?founder}\r\n      OPTIONAL{${editorRsrc} dbo:thumbnail ?imageUrl.}\r\n      OPTIONAL{${editorRsrc} dbo:foundingYear | dbp:founded ?year}\r\n      OPTIONAL{${editorRsrc} foaf:homepage ?homepage}\r\n      OPTIONAL{${editorRsrc} dbp:country /foaf:name | dbp:country | dbo:country /foaf:name   ?country}\r\n      FILTER(lang(?abstract) = \"en\").\r\n      FILTER(lang(?label) = \"en\").\r\n    }`;\r\n  \r\n  return await axiosQuery(query);\r\n}\r\n\r\n/**\r\n * Fetches the list of maximum 5 books published by the current editor.\r\n * @param {*} ressourceURI\r\n */\r\nexport async function fetchEditorBooks(resourceURI) {\r\n  resourceURI = encodeResource(resourceURI);\r\n  const editor = `dbr:${resourceURI}`;\r\n  let query = [\r\n    `Select ?book ?genre ?name ?imageUrl\r\n    (GROUP_CONCAT(DISTINCT ?authorName;   SEPARATOR=\", \") AS ?authorNames)\r\n    (MAX(?releaseDate) AS ?releaseDate)\r\n        WHERE {\r\n        ?book a dbo:Book;\r\n        dbp:name ?name;\r\n        dbp:author ?author;\r\n        dbo:publisher ${editor}.\r\n        ?author dbp:name ?authorName.\r\n        OPTIONAL {?book dbp:releaseDate ?releaseDate.}\r\n        OPTIONAL{?book dbo:thumbnail ?imageUrl}\r\n        OPTIONAL{?book dbp:author ?authorURI.}\r\n        }`,\r\n  ].join(\"\");\r\n  const response = await axiosQuery(query);\r\n  const shuffled = response.sort(() => 0.5 - Math.random());\r\n  let selected = shuffled.slice(0, 5);\r\n  \r\n  return selected;\r\n}\r\n\r\n/**\r\n * Allows to get a list of related editors to the current one filtering by the country\r\n * @param {String} resourceURI \r\n * @returns the assiocated list of editor\r\n */\r\nexport async function fetchRelatedEditors(resourceURI) {\r\n  resourceURI = encodeResource(resourceURI);\r\n  const editor = `dbr:${resourceURI}`;\r\n  let query = [\r\n    `Select ?publisher ?countryAns WHERE {\r\n          ${editor} dbp:country | dbp:country / foaf:name | dbo:country / foaf:name ?countryReq.\r\n          ?publisher a dbo:Publisher;\r\n          dbp:country | dbp:country / foaf:name | dbo:country / foaf:name ?countryAns.\r\n          FILTER(?countryAns = ?countryReq)\r\n        }LIMIT 10`,\r\n  ].join(\"\");\r\n  const response = await axiosQuery(query);\r\n  //console.log(response);\r\n  const shuffled = response.sort(() => 0.5 - Math.random());\r\n  let selected = shuffled.slice(0, 5);\r\n  //console.log(selected);\r\n  return selected;\r\n}\r\n\r\n/**\r\n * Allows to get the previous and the following book of the current one\r\n * @param {String} ressourceURI Uri of the current book\r\n * @returns ?book => the uri of the book; ?name => the name in english; ?position => before or after\r\n */\r\nexport async function fetchBookNeighbor(resourceURI) {\r\n  resourceURI = encodeResource(resourceURI);\r\n  const currentBook = `dbr:${resourceURI}`;\r\n  let query = [\r\n    `Select ?book ?name ?position WHERE {\r\n        {{ \r\n        ${currentBook} dbp:precededBy ?book.\r\n        ?book a dbo:Book.\r\n        ?book rdfs:label ?name.\r\n        BIND('before' AS ?position) \r\n        } UNION {\r\n        ${currentBook} dbp:followedBy ?book.\r\n        ?book a dbo:Book.\r\n        ?book rdfs:label ?name.\r\n        BIND('after' AS ?position)\r\n        }}\r\n        FILTER(lang(?name) = \"en\") } ORDER BY DESC(?position)`,\r\n  ].join(\"\");\r\n  return await axiosQuery(query);\r\n}\r\n\r\n/**\r\n * Allows to get the list of games based on the book\r\n * @param {String} name the name of the current book\r\n * @param {String} author the author of the current book\r\n * @returns\r\n */\r\nexport async function fetchAssociatedGames(name, author) {\r\n  name = encodeResource(name);\r\n  author = encodeResource(author);\r\n  let query = [\r\n    `SELECT DISTINCT(STR(?label)) as ?game ?uri ?date ?developer ?developerName\r\n    WHERE{\r\n        ?uri rdf:type dbo:VideoGame; \r\n        dbo:abstract ?abstract;\r\n        dbo:releaseDate ?date;\r\n        dbo:developer ?developer;\r\n        rdfs:label ?label.\r\n        ?developer rdfs:label ?developerName\r\n        Filter(( lang(?label)=\"en\" and lang(?abstract)=\"en\" and lang(?developerName)=\"en\" ) and (regex(?abstract,\"${name}\",\"i\")) and (regex(?abstract,\"${author}\",\"i\")))}\r\n    GROUP BY ?game ?uri ?date ORDER BY ASC(?date) ASC(?game)`,\r\n  ].join(\"\");\r\n  return await axiosQuery(query);\r\n}\r\n\r\n/**\r\n * Allows to get the list of movies based on the book\r\n * @param {String} name the name of the current book\r\n * @param {String} author the author of the current book\r\n * @returns\r\n */\r\nexport async function fetchAssociatedMovies(name, author) {\r\n  name = encodeResource(name);\r\n  author = encodeResource(author);\r\n  let query = [\r\n    `SELECT DISTINCT(STR(?label)) as ?movie ?uri ?runtime ?thumbnail\r\n    (GROUP_CONCAT(DISTINCT ?producer; SEPARATOR=\", \") AS ?producers)\r\n    (GROUP_CONCAT(DISTINCT ?producerName; SEPARATOR=\", \") AS ?producersName)\r\n    WHERE{\r\n      ?uri rdf:type dbo:Film;\r\n      dbo:abstract ?abstract;\r\n      dbo:producer ?producer;\r\n      dbo:runtime ?runtime;\r\n      rdfs:label ?label.\r\n      ?producer rdfs:label ?producerName\r\n      OPTIONAL{?uri dbo:thumbnail ?thumbnail}\r\n      Filter(( lang(?label)=\"en\" and lang(?abstract)=\"en\" and lang(?producerName)=\"en\" ) and (regex(?abstract,\"${name}\",\"i\")) and (regex(?abstract,\"${author}\",\"i\")))\r\n    }`,\r\n  ].join(\"\");\r\n  //console.log(query);\r\n  return await axiosQuery(query);\r\n}\r\n\r\n/**\r\n * Allows to get the list of musicals based on the book\r\n * @param {String} name the name of the current book\r\n * @param {String} author the author of the current book\r\n * @returns\r\n */\r\nexport async function fetchAssociatedMusicals(name, author) {\r\n  name = encodeResource(name);\r\n  author = encodeResource(author);\r\n  let query = [\r\n    `SELECT DISTINCT(STR(?label)) as ?musical ?uri ?author ?authorName ?lyric ?lyricistName ?music ?composerName\r\n         WHERE{\r\n            ?uri rdf:type dbo:Musical;\r\n            dbo:abstract ?abstract;\r\n            dbo:author ?author;\r\n            dbo:lyrics ?lyric; \r\n            dbo:musicBy ?music;\r\n            rdfs:label ?label.\r\n            ?author rdfs:label ?authorName.\r\n            ?music rdfs:label ?composerName.\r\n            ?lyric rdfs:label ?lyricistName.\r\n            Filter(( lang(?label)=\"en\" and lang(?abstract)=\"en\" and lang(?authorName)=\"en\" and lang(?lyricistName)=\"en\" and lang(?composerName)=\"en\" ) and (regex(?abstract,\"${name}\",\"i\")) and (regex(?abstract,\"${author}\",\"i\")))\r\n        }\r\n        GROUP BY ?musical ?uri ORDER BY ASC(?musical)`,\r\n  ].join(\"\");\r\n  return await axiosQuery(query);\r\n}\r\n\r\n/**\r\n * Allows to get the list of series based on the book\r\n * @param {String} name the name of the current book\r\n * @param {String} author the author of the current book\r\n * @returns\r\n */\r\nexport async function fetchAssociatedTVShow(name, author) {\r\n  name = encodeResource(name);\r\n  author = encodeResource(author);\r\n  let query = [\r\n    `SELECT DISTINCT(STR(?label)) as ?serie ?uri ?writer ?authorName ?composer ?composerName ?season\r\n         WHERE{\r\n            ?uri rdf:type dbo:TelevisionShow;\r\n            dbo:abstract ?abstract;\r\n            dbo:composer ?composer;\r\n            dbo:numberOfSeasons ?season;\r\n            rdfs:label ?label.\r\n            ?composer rdfs:label ?composerName.\r\n            OPTIONAL{?uri dbp:writer ?writer.}\r\n            Filter(( lang(?label)=\"en\" and lang(?abstract)=\"en\" and lang(?composerName)=\"en\" and lang(?writer)=\"en\" ) and (regex(?abstract,\"${name}\",\"i\")) and (regex(?abstract,\"${author}\",\"i\")))\r\n        }\r\n        ORDER BY ASC(?serie)`,\r\n  ].join(\"\");\r\n  return await axiosQuery(query);\r\n}\r\n\r\n/**\r\n * Allows to get the list of musics based on the book\r\n * @param {String} name the name of the current book\r\n * @param {String} author the author of the current book\r\n * @returns\r\n */\r\nexport async function fetchAssociatedMusics(name, author) {\r\n  name = encodeResource(name);\r\n  author = encodeResource(author);\r\n  let query = [\r\n    `SELECT DISTINCT ?uri  (STR(?label)) as  ?music ?artist ?artistName\r\n    WHERE{\r\n       {\r\n         ?uri a dbo:Song .\r\n       } UNION {\r\n         ?uri a dbo:Single.    \r\n       } UNION {\r\n         ?uri a dbo:Sound.\r\n       }\r\n       ?uri dbo:abstract ?abstract;\r\n       dbo:artist ?artist;\r\n       rdfs:label ?label.\r\n       ?artist rdfs:label ?artistName\r\n       Filter(( lang(?label)=\"en\" and lang(?abstract)=\"en\" and lang(?artistName)=\"en\" ) and (regex(?abstract,\"${name}\",\"i\")) )\r\n      }`,\r\n  ].join(\"\");\r\n  return await axiosQuery(query);\r\n}\r\n\r\n\r\n/**\r\n * Returns from DBPedia the general information of an author : his name, description, image,\r\n * birth and death dates, and a list of his genres and awards\r\n * These information are to be displayed on an author's page \r\n * @param {String} authorURI \r\n * @returns the general information of an author\r\n */\r\nexport async function queryAuthor(authorURI) {\r\n  authorURI = encodeResource(authorURI);\r\n  let author = `dbr:${authorURI}`;\r\n  let query = `SELECT (MIN(?name) AS ?name) ?description ?birthDate ?deathDate ?image \r\n    GROUP_CONCAT(DISTINCT ?education, \", \") as ?education\r\n    GROUP_CONCAT(DISTINCT ?listGenres, \",\") as ?listGenres\r\n    GROUP_CONCAT(DISTINCT ?listAwards, \";\") as ?listAwards \r\n  WHERE {\r\n  ${author} dbp:name ?name.\r\n  ${author} dbo:abstract ?description.\r\n  OPTIONAL{${author} dbo:birthDate ?birthDate}\r\n  OPTIONAL{${author} dbo:deathDate ?deathDate}\r\n  OPTIONAL{${author} dbo:thumbnail ?image}\r\n  OPTIONAL {\r\n    {{\r\n    \t${author} dbo:education / rdfs:label | dbp:education / rdfs:label | dbp:education ?education\r\n    }}\r\n    FILTER(?education != \"\"@en)\r\n    FILTER(lang(?education) = \"en\")\r\n  }\r\n  OPTIONAL{${author} dbp:awards ?awards. ?awards rdfs:label ?listAwards.\r\n    FILTER(?listAwards != \"\"@en)\r\n    FILTER(lang(?listAwards) = \"en\")\r\n  }\r\n  OPTIONAL {\r\n    {{\r\n    \t${author} dbo:genre / rdfs:label | dbp:genre / rdfs:label |  dbp:genre ?listGenres\r\n    \t\r\n    }}\r\n    FILTER(?listGenres != \"\"@en)\r\n    FILTER(lang(?listGenres) = \"en\")\r\n  }\r\n  FILTER(?name != \"\"@en)\r\n  FILTER(lang(?description) = \"en\")\r\n  FILTER(lang(?listAwards) = \"en\")\r\n  }`;\r\n  //console.log(\"query\" + query);\r\n  return await axiosQuery(query);\r\n}\r\n\r\n/**\r\n * Allows to try to get on DBpedia the advanced information of an author\r\n * that the user wants to know more about\r\n * @param {String} authorURI URI that allows to identify the resource in DBpedia\r\n * @returns Advanced information available\r\n */\r\nexport async function queryAuthorAdvancedInfo(authorURI) {\r\n  authorURI = encodeResource(authorURI);\r\n  let author = `dbr:${authorURI}`;\r\n  let query = `SELECT ?name\r\n    GROUP_CONCAT(DISTINCT ?occupation, \",\") as ?occupation\r\n    GROUP_CONCAT(DISTINCT ?nationality, \", \") as ?nationality\r\n    GROUP_CONCAT(DISTINCT ?mainInterest, \",\") as ?mainInterest\r\n    GROUP_CONCAT(DISTINCT ?notableIdea, \",\") as ?notableIdea\r\n    GROUP_CONCAT(DISTINCT ?philosophicalSchool, \",\") as ?philosophicalSchool\r\n    GROUP_CONCAT(DISTINCT ?academicDiscipline, \",\") as ?academicDiscipline\r\n    ?movement\r\n  WHERE {\r\n    ${author} dbp:name ?name.\r\n    OPTIONAL{${author} dbo:mainInterest / rdfs:label ?mainInterest. FILTER(lang(?mainInterest) = \"en\")}\r\n    OPTIONAL{${author} dbo:notableIdea / rdfs:label ?notableIdea. FILTER(lang(?notableIdea) = \"en\")}\r\n    OPTIONAL{${author} dbo:philosophicalSchool / rdfs:label ?philosophicalSchool. FILTER(lang(?philosophicalSchool) = \"en\")}\r\n    OPTIONAL{${author} dbo:academicDiscipline / rdfs:label ?academicDiscipline. FILTER(lang(?academicDiscipline) = \"en\")}\r\n    OPTIONAL {\r\n        {{\r\n            ${author} dbo:occupation / rdfs:label | dbo:occupation / rdfs:label | dbp:occupation  ?occupation.\r\n            \r\n        }}\r\n        FILTER(?occupation != \"\"@en)\r\n        FILTER(lang(?occupation) = \"en\")\r\n      }\r\n      OPTIONAL {\r\n        {{\r\n            ${author} dbo:nationality / rdfs:label | dbp:nationality / rdfs:label | dbo:nationality ?nationality.\r\n        }}\r\n        FILTER(?nationality != \"\"@en)\r\n        FILTER(lang(?nationality) = \"en\")\r\n      }\r\n      OPTIONAL{\r\n          ${author} dbo:movement / rdfs:label ?movement.\r\n          FILTER(?movement != \"\")\r\n          FILTER(lang(?movement) = \"en\")\r\n        }\r\n  }`;\r\n  //console.log(\"query\" + query);\r\n  return await axiosQuery(query);\r\n}\r\n\r\n/**\r\n * Allows to get the list of books with resources in DBpedia written by the current author\r\n * @param {String} authorURI URI that allows to identify the resource in DBpedia\r\n * @returns list of books written by the author\r\n */\r\nexport async function fetchBookAssociatedToAuthor(authorURI) {\r\n  authorURI = encodeResource(authorURI);\r\n  let author = `dbr:${authorURI}`;\r\n  let query = `SELECT ?book\r\n    (MAX(?name) AS ?name)\r\n    (MAX(?releaseDate) AS ?releaseDate)\r\n    (MAX(?imageURL) AS ?imageUrl)\r\n    WHERE {\r\n        ?book a dbo:Book;\r\n          dbp:name ?name;\r\n          dbo:author ${author};\r\n          dbo:abstract ?abstract.\r\n        OPTIONAL {?book dbo:thumbnail ?imageURL.}\r\n        OPTIONAL {?book dbp:releaseDate ?releaseDate.}\r\n        FILTER(lang(?name) = \"en\")\r\n        FILTER(lang(?abstract) = \"en\")\r\n    } ORDER BY ASC(?name)\r\n    `;\r\n  //console.log(query);\r\n  let response = await axiosQuery(query);\r\n  //console.log(response);\r\n  return response;\r\n}\r\n\r\n\r\n/**\r\n * Returns from DBPedia  the information needed for the author's timeline, i.e. his notable works like books and their release dates \r\n * @param {String} resourceURI \r\n * @returns list of notable works and their release dates \r\n */\r\nexport async function getAuthorTimeLife(resourceURI) {\r\n  resourceURI = encodeResource(resourceURI);\r\n  const currentAuthor = `dbr:${resourceURI}`;\r\n  let query = `SELECT GROUP_CONCAT(?notableWorkName, \";\") as ?notableWorkName GROUP_CONCAT(?releaseDate, \";\") as ?releaseDate WHERE {\r\n        ${currentAuthor} dbo:notableWork ?notableWork.\r\n        ?notableWork dbp:name ?notableWorkName;\r\n        dbp:releaseDate ?releaseDate.\r\n      }`;\r\n\r\n  return await axiosQuery(query);\r\n}\r\n\r\n/**\r\n * Allows to get the list of author in DBpedia that have influenced the author or that have been\r\n * influenced by the current author\r\n * @param {String} resourceURI URI that allows to identify the resource in DBpedia\r\n * @param {Boolean} isInspiratedBy true if we want author inspirated by the current author\r\n * false if we want author that inspirated the current author\r\n * @returns the list of associated author depending on the boolean isInspiratedBy\r\n */\r\nexport async function getAuthorInspiration(resourceURI, isInspiratedBy) {\r\n  resourceURI = encodeResource(resourceURI);\r\n  const currentAuthor = `dbr:${resourceURI}`;\r\n  let query = \"\";\r\n  if (isInspiratedBy) {\r\n    query = `SELECT DISTINCT ?writer \r\n    (MIN(?name) AS ?name) \r\n    (MAX(?image) AS ?imageUrl) \r\n    (MIN(?birthDate) AS ?birthDate) \r\n    (MIN(?deathDate) AS ?deathDate)\r\n    WHERE {\r\n        {{\r\n          ?writer a dbo:Writer.\r\n          } UNION {\r\n            ?writer a dbo:Scientist.\r\n          } UNION {\r\n            ?writer a dbo:Philosopher.\r\n          }\r\n        }\r\n        ?writer dbp:name ?name.\r\n        OPTIONAL  {?writer dbo:thumbnail ?image.}\r\n        OPTIONAL {?writer dbp:birthDate ?birthDate.}\r\n        OPTIONAL {?writer dbp:deathDate ?deathDate.}\r\n        {{\r\n            ?writer dbo:influencedBy | dbp:influences  ${currentAuthor}.\r\n        \r\n        }}\r\n    } ORDER BY ASC(?name)  \r\n    `;\r\n  } else {\r\n    query = `SELECT DISTINCT ?writer \r\n    (MIN(?name) AS ?name) \r\n    (MAX(?image) AS ?imageUrl) \r\n    (MIN(?birthDate) AS ?birthDate) \r\n    (MIN(?deathDate) AS ?deathDate)\r\n    WHERE {\r\n      {{\r\n        ?writer a dbo:Writer.\r\n        } UNION {\r\n          ?writer a dbo:Scientist.\r\n        } UNION {\r\n          ?writer a dbo:Philosopher.\r\n        }\r\n      }\r\n        ?writer dbp:name ?name.\r\n        OPTIONAL  {?writer dbo:thumbnail ?image.}\r\n        OPTIONAL {?writer dbp:birthDate ?birthDate.}\r\n        OPTIONAL {?writer dbp:deathDate ?deathDate.}\r\n        {{\r\n            ?writer dbo:influenced | dbp:influenced ${currentAuthor}.\r\n        \r\n        }}\r\n    } ORDER BY ASC(?name)    \r\n    `;\r\n  }\r\n  return await axiosQuery(query);\r\n}\r\n\r\n/**\r\n * Allows to get the list of authors in DBpedia associated with the current author\r\n * filter with parameter\r\n * @param {String} resourceURI URI that allows to identify the resource in DBpedia\r\n * @param {String} filtre the SPARQL filter used\r\n * @returns  the list of associated author depending on the filter\r\n */\r\nexport async function getRelatedAuthor(resourceURI, filtre) {\r\n  resourceURI = encodeResource(resourceURI);\r\n  const currentAuthor = `dbr:${resourceURI}`;\r\n  let query = `SELECT DISTINCT ?writer ?filtre\r\n  (MIN(?name) AS ?name) \r\n  (MAX(?image) AS ?imageUrl) \r\n  (MIN(?birthDate) AS ?birthDate) \r\n  (MIN(?deathDate) AS ?deathDate)\r\n  WHERE {\r\n      ?writer dbp:name ?name.\r\n      {{\r\n          ?writer a dbo:Writer.\r\n        } UNION {\r\n          ?writer a dbo:Scientist.\r\n        } UNION {\r\n          ?writer a dbo:Philosopher.\r\n        }\r\n      }\r\n      OPTIONAL  {?writer dbo:thumbnail ?image.}\r\n      OPTIONAL {?writer dbp:birthDate ?birthDate.}\r\n      OPTIONAL {?writer dbp:deathDate ?deathDate.}\r\n      ${filtre}\r\n      FILTER(?writer != ${currentAuthor})\r\n  } LIMIT 4`;\r\n  return await axiosQuery(query);\r\n}\r\n\r\n/**\r\n * Allows to get the family tree with name of the current author\r\n * @param {String} resourceURI URI that allows to identify the resource in DBpedia\r\n * @returns the list of names of children of the author and name of his/her spouse\r\n */\r\nexport async function getFamilyTree(resourceURI) {\r\n  resourceURI = encodeResource(resourceURI);\r\n  const currentAuthor = `dbr:${resourceURI}`;\r\n  let query = `SELECT ?spouse\r\n  GROUP_CONCAT(DISTINCT ?children , \";\") as ?children \r\n  WHERE {\r\n      OPTIONAL {\r\n      {{\r\n          ${currentAuthor} dbo:spouse / rdfs:label | dbp:spouse / rdfs:label | dbp:spouse ?spouse.\r\n      }}\r\n      FILTER(?spouse != \"\"@en)\r\n      FILTER(lang(?spouse) = \"en\")\r\n    }\r\n    OPTIONAL {\r\n      ${currentAuthor} dbo:child / rdfs:label ?children\r\n      FILTER(?children != \"\"@en)\r\n      FILTER(lang(?children) = \"en\")\r\n    }\r\n  } LIMIT 1\r\n  `;\r\n  return await axiosQuery(query);\r\n}\r\n\r\n/**\r\n * Research books containing the correct name\r\n * @param {*} name the research text\r\n * @param {*} limit the maximum number of result\r\n * @returns result list of books\r\n */\r\nexport async function researchQuery(name, limit) {\r\n  name = encodeResource(name);\r\n  let query = `SELECT ?book (GROUP_CONCAT(DISTINCT ?authorName;   SEPARATOR=\", \") AS ?authorNames)\r\n  (MAX(?name) AS ?name)\r\n  (MAX(?releaseDate) AS ?releaseDate)\r\n  (MAX(?imageURL) AS ?imageUrl)\r\n      WHERE {\r\n          ?book a dbo:Book.\r\n          ?book dbp:name ?name.\r\n          ?book dbo:author ?author;\r\n          dbo:abstract ?abstract.\r\n          OPTIONAL {?book dbo:thumbnail ?imageURL.}\r\n          OPTIONAL {?book dbp:releaseDate ?releaseDate.}\r\n          ?author dbp:name ?authorName.\r\n          FILTER(lang(?name) = \"en\")\r\n          FILTER(lang(?abstract) = \"en\")\r\n          FILTER (regex(?name, \"${name}\", \"i\") || regex(?authorName, \"${name}\",\"i\"))\r\n    } ORDER BY ASC(?name) LIMIT ${limit}`;\r\n  return await axiosQuery(query);\r\n}\r\n\r\n/**\r\n * Research books containing the correct literary genre that match with the name\r\n * @param {*} name the research text\r\n * @param {*} limit the maximum number of result\r\n * @returns result list of books\r\n */\r\nasync function getLiteraryGenre(name, limit) {\r\n  name = encodeResource(name);\r\n  let query = `SELECT ?book (GROUP_CONCAT(DISTINCT ?authorName;   SEPARATOR=\", \") AS ?authorNames)\r\n    (MAX(?name) AS ?name)\r\n    (MAX(?releaseDate) AS ?releaseDate)\r\n    (MAX(?imageURL) AS ?imageUrl)\r\n        WHERE {\r\n         \t?book a dbo:Book.\r\n\t        ?book dbp:name ?name.\r\n\t        ?book dbo:author ?author;\r\n\t        dbo:abstract ?abstract.\r\n\t        OPTIONAL {?book dbo:thumbnail ?imageURL.}\r\n\t        OPTIONAL {?book dbp:releaseDate ?releaseDate.}\r\n\t        ?author dbp:name ?authorName.\r\n\t        FILTER(lang(?name) = \"en\")\r\n\t        FILTER(lang(?abstract) = \"en\")\r\n        {\r\n            ?book dbo:literaryGenre / rdfs:label | dbp:genre ?literaryGenreLabel.\r\n\t    \tFILTER(lang(?literaryGenreLabel) = \"en\")\r\n\t    \tFILTER(regex(?literaryGenreLabel, \"${name}\", \"i\"))\r\n     \t}} ORDER BY ASC(?name) LIMIT ${limit}`;\r\n  return await axiosQuery(query);\r\n}\r\n\r\n/**\r\n * Research books containing the correct genre that match with the name\r\n * @param {*} name the research text\r\n * @param {*} limit the maximum number of result\r\n * @returns result list of books\r\n */\r\nasync function getGenre(name, limit) {\r\n  name = encodeResource(name);\r\n  let query = `SELECT ?book (GROUP_CONCAT(DISTINCT ?authorName;   SEPARATOR=\", \") AS ?authorNames)\r\n    (MAX(?name) AS ?name)\r\n    (MAX(?releaseDate) AS ?releaseDate)\r\n    (MAX(?imageURL) AS ?imageUrl)\r\n        WHERE {\r\n         \t?book a dbo:Book.\r\n\t        ?book dbp:name ?name.\r\n\t        ?book dbo:author ?author;\r\n\t        dbo:abstract ?abstract.\r\n\t        OPTIONAL {?book dbo:thumbnail ?imageURL.}\r\n\t        OPTIONAL {?book dbp:releaseDate ?releaseDate.}\r\n\t        ?author dbp:name ?authorName.\r\n\t        FILTER(lang(?name) = \"en\")\r\n\t        FILTER(lang(?abstract) = \"en\")\r\n        {\r\n               ?book dbp:genre ?genre.\r\n\t    \tFILTER(lang(?genre) = \"en\")\r\n\t    \tFILTER(regex(?genre, \"${name}\", \"i\"))\r\n\t   }\r\n     \t} ORDER BY ASC(?name) LIMIT ${limit}`;\r\n  return await axiosQuery(query);\r\n}\r\n\r\n/**\r\n * Research books containing the correct country that match with the name\r\n * @param {*} name the research text\r\n * @param {*} limit the maximum number of result\r\n * @returns result list of books\r\n */\r\nasync function getCountry(name, limit) {\r\n  name = encodeResource(name);\r\n  let query = `SELECT ?book (GROUP_CONCAT(DISTINCT ?authorName;   SEPARATOR=\", \") AS ?authorNames)\r\n    (MAX(?name) AS ?name)\r\n    (MAX(?releaseDate) AS ?releaseDate)\r\n    (MAX(?imageURL) AS ?imageUrl)\r\n        WHERE {\r\n         \t?book a dbo:Book.\r\n\t        ?book dbp:name ?name.\r\n\t        ?book dbo:author ?author;\r\n\t        dbo:abstract ?abstract.\r\n\t        OPTIONAL {?book dbo:thumbnail ?imageURL.}\r\n\t        OPTIONAL {?book dbp:releaseDate ?releaseDate.}\r\n\t        ?author dbp:name ?authorName.\r\n\t        FILTER(lang(?name) = \"en\")\r\n\t        FILTER(lang(?abstract) = \"en\")\r\n        {\r\n               ?book dbp:country ?country;\r\n\t    \tdbp:language ?language.\r\n\t    \tFILTER(lang(?country) = \"en\")\r\n\t    \tFILTER(lang(?language) = \"en\")\r\n\t    \tFILTER (regex(?country, \"${name}\", \"i\") || regex(?language, \"${name}\",\"i\"))\r\n\t   }\r\n     \t} ORDER BY ASC(?name) LIMIT ${limit}`;\r\n  return await axiosQuery(query);\r\n}\r\n\r\n/**\r\n * Research books containing the correct subject that match with the name\r\n * @param {*} name the research text\r\n * @param {*} limit the maximum number of result\r\n * @returns result list of books\r\n */\r\nasync function getSubject(name, limit) {\r\n  name = encodeResource(name);\r\n  let query = `SELECT ?book (GROUP_CONCAT(DISTINCT ?authorName;   SEPARATOR=\", \") AS ?authorNames)\r\n    (MAX(?name) AS ?name)\r\n    (MAX(?releaseDate) AS ?releaseDate)\r\n    (MAX(?imageURL) AS ?imageUrl)\r\n        WHERE {\r\n         \t?book a dbo:Book.\r\n\t        ?book dbp:name ?name.\r\n\t        ?book dbo:author ?author;\r\n\t        dbo:abstract ?abstract.\r\n\t        OPTIONAL {?book dbo:thumbnail ?imageURL.}\r\n\t        OPTIONAL {?book dbp:releaseDate ?releaseDate.}\r\n\t        ?author dbp:name ?authorName.\r\n\t        FILTER(lang(?name) = \"en\")\r\n\t        FILTER(lang(?abstract) = \"en\")\r\n        {\r\n               ?book dbp:subject ?subject.\r\n\t    \t?subject rdfs:label ?subjectLabel.\r\n\t    \tFILTER(lang(?subjectLabel) = \"en\")\r\n\t    \tFILTER(regex(?subjectLabel, \"${name}\", \"i\"))\r\n\t   }\r\n     \t} ORDER BY ASC(?name) LIMIT ${limit}`;\r\n  return await axiosQuery(query);\r\n}\r\n\r\n/**\r\n * Research books containing the correct hypernym that match with the name\r\n * @param {*} name the research text\r\n * @param {*} limit the maximum number of result\r\n * @returns result list of books\r\n */\r\nasync function getHypernym(name, limit) {\r\n  name = encodeResource(name);\r\n  let query = `SELECT ?book (GROUP_CONCAT(DISTINCT ?authorName;   SEPARATOR=\", \") AS ?authorNames)\r\n    (MAX(?name) AS ?name)\r\n    (MAX(?releaseDate) AS ?releaseDate)\r\n    (MAX(?imageURL) AS ?imageUrl)\r\n        WHERE {\r\n         \t?book a dbo:Book.\r\n\t        ?book dbp:name ?name.\r\n\t        ?book dbo:author ?author;\r\n\t        dbo:abstract ?abstract.\r\n\t        OPTIONAL {?book dbo:thumbnail ?imageURL.}\r\n\t        OPTIONAL {?book dbp:releaseDate ?releaseDate.}\r\n\t        ?author dbp:name ?authorName.\r\n\t        FILTER(lang(?name) = \"en\")\r\n\t        FILTER(lang(?abstract) = \"en\")\r\n        {\r\n            ?book gold:hypernym ?hypernym.\r\n\t    \t?hypernym rdfs:label ?hypernymLabel.\r\n\t    \tFILTER(lang(?hypernymLabel) = \"en\")\r\n\t    \tFILTER(regex(?hypernymLabel, \"${name}\", \"i\"))\r\n\t   }\r\n     \t} ORDER BY ASC(?name) LIMIT ${limit}`;\r\n  return await axiosQuery(query);\r\n}\r\n\r\n/**\r\n * Research authors containing the correct name\r\n * @param {*} name the research text\r\n * @returns result list of authors\r\n */\r\nexport async function getAuthors(name) {\r\n  const offset = 0;\r\n  name = encodeResource(name);\r\n  let query = `SELECT ?writer (MIN(?name) AS ?name) (MAX(?image) AS ?imageUrl) (MIN(?birthDate) AS ?birthDate) (MIN(?deathDate) AS ?deathDate) WHERE {\r\n    {{\r\n      ?writer a dbo:Writer.\r\n    } UNION {\r\n      ?writer a dbo:Scientist.\r\n    } UNION {\r\n      ?writer a dbo:Philosopher.\r\n    }\r\n  }\r\n    ?writer dbp:name ?name.\r\n    OPTIONAL {?writer dbp:birthDate ?birthDate.}\r\n    OPTIONAL {?writer dbp:deathDate ?deathDate.}\r\n    OPTIONAL  {?writer dbo:thumbnail ?image.}\r\n    FILTER (regex(?name, \"${name}\", \"i\"))\r\n    } ORDER BY ASC(?name)`;\r\n  return await axiosQuery(query);\r\n}\r\n\r\n/**\r\n * Research authors containing the correct nationality that match with the name\r\n * @param {*} name the research text\r\n * @param {*} limit the maximum number of result\r\n * @returns result list of authors\r\n */\r\nasync function getNationality(name, limit) {\r\n  name = encodeResource(name);\r\n  let query = `SELECT ?writer (MIN(?name) AS ?name) (MAX(?image) AS ?imageUrl) (MIN(?birthDate) AS ?birthDate) (MIN(?deathDate) AS ?deathDate) WHERE {\r\n          {{\r\n            ?writer a dbo:Writer.\r\n          } UNION {\r\n            ?writer a dbo:Scientist.\r\n          } UNION {\r\n            ?writer a dbo:Philosopher.\r\n          }\r\n        }\r\n        ?writer dbp:name ?name.\r\n        OPTIONAL {?writer dbp:birthDate ?birthDate.}\r\n        OPTIONAL {?writer dbp:deathDate ?deathDate.}\r\n        OPTIONAL  {?writer dbo:thumbnail ?image.}\r\n        ?writer dbp:nationality ?nationality.\r\n            FILTER(lang(?nationality) = \"en\")\r\n            FILTER (regex(?nationality, \"${name}\", \"i\"))\r\n    \r\n        } ORDER BY ASC(?name) OFFSET ${limit}`;\r\n  return await axiosQuery(query);\r\n}\r\n\r\n/**\r\n * Research authors containing the correct occupation that match with the name\r\n * @param {*} name the research text\r\n * @param {*} limit the maximum number of result\r\n * @returns result list of authors\r\n */\r\nasync function getOccupation(name, limit) {\r\n  name = encodeResource(name);\r\n  let query = `SELECT ?writer (MIN(?name) AS ?name) (MAX(?image) AS ?imageUrl) (MIN(?birthDate) AS ?birthDate) (MIN(?deathDate) AS ?deathDate) WHERE {\r\n    {{\r\n      ?writer a dbo:Writer.\r\n    } UNION {\r\n      ?writer a dbo:Scientist.\r\n    } UNION {\r\n      ?writer a dbo:Philosopher.\r\n    }\r\n  }\r\n        ?writer dbp:name ?name.\r\n        OPTIONAL {?writer dbp:birthDate ?birthDate.}\r\n        OPTIONAL {?writer dbp:deathDate ?deathDate.}\r\n        OPTIONAL  {?writer dbo:thumbnail ?image.}\r\n        ?writer dbo:occupation ?occupation.\r\n    \t?occupation rdfs:label ?occupationLabel.\r\n    \tFILTER(lang(?occupationLabel) = \"en\")\r\n    \tFILTER (regex(?occupationLabel, \"${name}\", \"i\"))\r\n    \r\n        } ORDER BY ASC(?name) OFFSET ${limit}`;\r\n  return await axiosQuery(query);\r\n}\r\n\r\n/**\r\n * Research authors containing the correct subject that match with the name\r\n * @param {*} name the research text\r\n * @param {*} limit the maximum number of result\r\n * @returns result list of authors\r\n */\r\nasync function getAuthorSubject(name, limit) {\r\n  name = encodeResource(name);\r\n  let query = `SELECT ?writer (MIN(?name) AS ?name) (MAX(?image) AS ?imageUrl) (MIN(?birthDate) AS ?birthDate) (MIN(?deathDate) AS ?deathDate) WHERE {\r\n    {{\r\n      ?writer a dbo:Writer.\r\n    } UNION {\r\n      ?writer a dbo:Scientist.\r\n    } UNION {\r\n      ?writer a dbo:Philosopher.\r\n    }\r\n  }\r\n        ?writer dbp:name ?name.\r\n        OPTIONAL {?writer dbp:birthDate ?birthDate.}\r\n        OPTIONAL {?writer dbp:deathDate ?deathDate.}\r\n        OPTIONAL  {?writer dbo:thumbnail ?image.}\r\n    \t?writer dct:subject ?subject.\r\n    \t?subject rdfs:label ?subjectLabel.\r\n    \tFILTER(lang(?subjectLabel) = \"en\")\r\n    \tFILTER (regex(?subjectLabel, \"${name}\", \"i\"))\r\n    \r\n        } ORDER BY ASC(?name) OFFSET ${limit}`;\r\n  return await axiosQuery(query);\r\n}\r\n\r\n/**\r\n * Research authors containing the correct movement that match with the name\r\n * @param {*} name the research text\r\n * @param {*} limit the maximum number of result\r\n * @returns result list of authors\r\n */\r\nasync function getMovement(name, limit) {\r\n  name = encodeResource(name);\r\n  let query = `SELECT ?writer (MIN(?name) AS ?name) (MAX(?image) AS ?imageUrl) (MIN(?birthDate) AS ?birthDate) (MIN(?deathDate) AS ?deathDate) WHERE {\r\n    {{\r\n      ?writer a dbo:Writer.\r\n    } UNION {\r\n      ?writer a dbo:Scientist.\r\n    } UNION {\r\n      ?writer a dbo:Philosopher.\r\n    }\r\n  }\r\n        ?writer dbp:name ?name.\r\n        OPTIONAL {?writer dbp:birthDate ?birthDate.}\r\n        OPTIONAL {?writer dbp:deathDate ?deathDate.}\r\n        OPTIONAL  {?writer dbo:thumbnail ?image.}\r\n        ?writer dbo:movement ?movement.\r\n    \t?movement rdfs:label ?movementLabel.\r\n    \tFILTER(lang(?movementLabel) = \"en\")\r\n    \tFILTER (regex(?movementLabel, \"${name}\", \"i\"))\r\n    \r\n        } ORDER BY ASC(?name) OFFSET ${limit}`;\r\n  return await axiosQuery(query);\r\n}\r\n\r\n/**\r\n * Research authors containing the correct author genre that match with the name\r\n * @param {*} name the research text\r\n * @param {*} limit the maximum number of result\r\n * @returns result list of authors\r\n */\r\nasync function getAuthorGenre(name, limit) {\r\n  name = encodeResource(name);\r\n  let query = `SELECT ?writer (MIN(?name) AS ?name) (MAX(?image) AS ?imageUrl) (MIN(?birthDate) AS ?birthDate) (MIN(?deathDate) AS ?deathDate) WHERE {\r\n    {{\r\n      ?writer a dbo:Writer.\r\n    } UNION {\r\n      ?writer a dbo:Scientist.\r\n    } UNION {\r\n      ?writer a dbo:Philosopher.\r\n    }\r\n  }\r\n        ?writer dbp:name ?name.\r\n        OPTIONAL {?writer dbp:birthDate ?birthDate.}\r\n        OPTIONAL {?writer dbp:deathDate ?deathDate.}\r\n        OPTIONAL  {?writer dbo:thumbnail ?image.}\r\n        ?writer dbo:genre ?genre.\r\n    \t?genre rdfs:label ?genreLabel.\r\n    \tFILTER(lang(?genreLabel) = \"en\")\r\n    \tFILTER (regex(?genreLabel, \"${name}\", \"i\"))\r\n    \r\n        } ORDER BY ASC(?name) OFFSET ${limit}`;\r\n  return await axiosQuery(query);\r\n}\r\n\r\n/**\r\n * Gives the first 10 books or authors found\r\n * on dbpedia containing the string passed in parameter sorted alphabetically\r\n * @param {String} text the name in parameter\r\n * @returns List of names associated with a type of Book or Writer\r\n */\r\nexport async function autocompleteQuery(text) {\r\n  encodeResource(text);\r\n  let query = [\r\n    `SELECT DISTINCT ?name ?type\r\n        WHERE {\r\n        {{ ?uri a dbo:Book.\r\n        ?uri dbp:name ?name. \r\n        BIND('Book' AS ?type)}\r\n        UNION {\r\n        ?uri dbp:name ?name.\r\n        ?uri a dbo:Writer. \r\n        BIND('Writer' AS ?type)}} \r\n        FILTER (isLiteral(?name)) \r\n        FILTER(lang(?name) = \"en\") \r\n        FILTER (regex(?name, \"${text}\",\"i\")) \r\n        }\r\n        ORDER BY ASC(?name)\r\n        LIMIT 10`,\r\n  ].join(\"\");\r\n  return await axiosQuery(query);\r\n}\r\n\r\n/**\r\n * Allows to research books in DBpedia database by filtering on different parameters\r\n * The different list of books will be sorted\r\n * @param {*} name the research text\r\n * @returns result list of books\r\n */\r\nexport async function getBookSearch(name) {\r\n  let resultSet = new Set();\r\n  return Promise.all([\r\n    researchQuery(name, 300).then((result) => {\r\n      result.forEach(resultSet.add, resultSet);\r\n    }),\r\n    getLiteraryGenre(name, 200).then((result) => {\r\n      result.forEach(resultSet.add, resultSet);\r\n    }),\r\n    getCountry(name, 100).then((result) => {\r\n      result.forEach(resultSet.add, resultSet);\r\n    }),\r\n    getHypernym(name, 200).then((result) => {\r\n      result.forEach(resultSet.add, resultSet);\r\n    }),\r\n  ]).then(() => {\r\n    return Array.from(resultSet).sort(function (a, b) {\r\n      /**\r\n       * Criteres de comparaisons pour l'ordre des résultats:\r\n       * 1. Le titre du livre contiens la chaine de characacteres `name` dans la recherche\r\n       * 2. L'auteur du livre contiens `name` dans la recherche\r\n       *\r\n       * Dans le code une compaison réalisée en bas de la fonction a plus d'importance!\r\n       */\r\n\r\n      // Comparaison par nom de l'auteur\r\n      // a est supérieur à b si son titre contiens le mot dans la recherche et que b non\r\n      if (\r\n        a.authorNames?.value.toUpperCase().includes(name.toUpperCase()) &&\r\n        !b.authorNames?.value.toUpperCase().includes(name.toUpperCase())\r\n      )\r\n        return 1;\r\n      // b est supérieur à a si son titre contiens le mot dans la recherche et que a non\r\n      if (\r\n        !a.authorNames?.value.toUpperCase().includes(name.toUpperCase()) &&\r\n        b.authorNames?.value.toUpperCase().includes(name.toUpperCase())\r\n      )\r\n        return -1;\r\n\r\n      // Comparaison par titre du livre\r\n      // a est supérieur à b si son titre contiens le mot dans la recherche et que b non\r\n      if (\r\n        a.name.value.toUpperCase().includes(name.toUpperCase()) &&\r\n        !b.name.value.includes(name.toUpperCase())\r\n      )\r\n        return 1;\r\n      // b est supérieur à a si son titre contiens le mot dans la recherche et que a non\r\n      if (\r\n        !a.name.value.toUpperCase().includes(name.toUpperCase()) &&\r\n        b.name.value.toUpperCase().includes(name.toUpperCase())\r\n      )\r\n        return -1;\r\n\r\n      return 0;\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Allows to research authors in DBpedia database by filtering on different parameters\r\n * The different list of authors will be sorted\r\n * @param {*} name the research text\r\n * @returns result list of authors\r\n */\r\nexport async function getAuthorSearch(name) {\r\n  let resultSet = new Set();\r\n  return Promise.all([\r\n    getAuthors(name, 300).then((result) => {\r\n      result.forEach(resultSet.add, resultSet);\r\n    }),\r\n    getNationality(name, 200).then((result) => {\r\n      result.forEach(resultSet.add, resultSet);\r\n    }),\r\n    // getOccupation(name, 100).then((result) => {\r\n    //   result.forEach(resultSet.add, resultSet);\r\n    // }),\r\n    // getAuthorGenre(name, 200).then((result) => {\r\n    //   result.forEach(resultSet.add, resultSet);\r\n    // }),\r\n    // getAuthorSubject(name, 200).then((result) => {\r\n    //   result.forEach(resultSet.add, resultSet);\r\n    // }),\r\n    // getMovement(name, 200).then((result) => {\r\n    //   result.forEach(resultSet.add, resultSet);\r\n    // }),\r\n  ]).then(() => {\r\n    return Array.from(resultSet).sort(function (a, b) {\r\n      /**\r\n       * Criteres de comparaisons pour l'ordre des résultats:\r\n       * 1. Le titre du livre contiens la chaine de characacteres `name` dans la recherche\r\n       */\r\n\r\n      // Comparaison par titre du livre\r\n      // a est supérieur à b si son titre contiens le mot dans la recherche et que b non\r\n      if (a.name.value.includes(name) && !b.name.value.includes(name)) return 1;\r\n      // b est supérieur à a si son titre contiens le mot dans la recherche et que a non\r\n      if (!a.name.value.includes(name) && b.name.value.includes(name))\r\n        return -1;\r\n\r\n      return 0;\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Allows to use Axios API in order to do an HTTP GET request that contains a SPARQL query \r\n * on DBPEDIA. The API will handle the result and return it in JSON format.\r\n * @param {String} query the sparql query \r\n * @returns the result of the request GET\r\n */\r\nasync function axiosQuery(query) {\r\n  let url = \"http://dbpedia.org/sparql\";\r\n  query = query.replace(/&/g, \"\\\\&\");\r\n  query = query.replace(/#/g, \"%23\");\r\n  //console.log(query);\r\n  let config = {\r\n    params: {\r\n      \"default-graph-uri\": \"http://dbpedia.org\",\r\n      query: query,\r\n      format: \"application/json\",\r\n    },\r\n  };\r\n  return new Promise((resolve, reject) => {\r\n    axios\r\n      .get(url, config)\r\n      .then((response) => resolve(response.data.results.bindings))\r\n      .catch((err) => {\r\n        console.error(err);\r\n      });\r\n  });\r\n}\r\n","import * as React from \"react\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { CardActionArea, Grid } from \"@mui/material\";\r\n\r\nfunction BookResult({ index, data, navigate }) {\r\n  const handleClick = () => {\r\n    navigate(`../../bookInfo/${data.bookURI}`, { state: { redirect: true } });\r\n  };\r\n  let bookCover;\r\n  if (data.img) {\r\n    bookCover = (\r\n      <CardMedia\r\n        component=\"img\"\r\n        image={data.img}\r\n        alt=\"miniature\"\r\n        sx={{\r\n          borderRadius: 2,\r\n          height: 2 / 3,\r\n          width: \"100%\",\r\n          filter: \"drop-shadow(0px 0px 10px rgba(0, 0, 0, 0.25))\",\r\n        }}\r\n      />\r\n    );\r\n  } else {\r\n    bookCover = (\r\n      <Box\r\n        sx={{\r\n          pt: 8,\r\n          pr: 2,\r\n          pl: 1,\r\n          borderRadius: 2,\r\n          backgroundColor: \"#2F2F2F\",\r\n          height: 2 / 3,\r\n          width: \"100%\",\r\n          filter: \"drop-shadow(0px 0px 10px rgba(0, 0, 0, 0.25))\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          alignItems: \"center\",\r\n          textAlign: \"center\",\r\n        }}\r\n      >\r\n        <Typography\r\n          gutterBottom\r\n          variant=\"h5\"\r\n          component=\"div\"\r\n          color=\"primary.contrastText\"\r\n          sx={{ textOverflow: \"ellipsis\" }}\r\n        >\r\n          {data.title}\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"#DBDBDB\">\r\n          {data.author}\r\n        </Typography>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Grid onClick={() => handleClick()} item key={index}>\r\n      <Card elevation={0}>\r\n        <CardActionArea sx={{ height: 500, width: 195 }}>\r\n          {bookCover}\r\n          <CardContent sx={{ height: 1 / 3, width: \"100%\" }}>\r\n            <Typography\r\n              gutterBottom\r\n              variant=\"h5\"\r\n              component=\"div\"\r\n              sx={{ textOverflow: \"ellipsis\" }}\r\n            >\r\n              {data.title}\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n              {data.author} {data.releaseDate ? \" - \" + data.releaseDate : \"\"}\r\n            </Typography>\r\n          </CardContent>\r\n        </CardActionArea>\r\n      </Card>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default BookResult;\r\n","import * as React from \"react\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport {CardActionArea, Grid} from \"@mui/material\";\r\n\r\nfunction dateFormat(date) {\r\n    if (date != null && date.split('-')[0] != '') {\r\n        return date.split('-')[0];\r\n    } else {\r\n        return '';\r\n    }\r\n}\r\n\r\nfunction AuthorResult(index, data, navigate, resetState) {\r\n    const handleClick = () => {\r\n        if (resetState !== null) {\r\n            resetState();\r\n        }\r\n        navigate(`../../authorInfo/${data.authorURI}`);\r\n    };\r\n    // uri, nom date naissance, date mort, thumbnail\r\n    let authorCover;\r\n    if (data.img) {\r\n        authorCover = (\r\n            <CardMedia\r\n                component=\"img\"\r\n                image={data.img}\r\n                alt=\"miniature\"\r\n                sx={{\r\n                    borderRadius: 2,\r\n                    height: 2 / 3,\r\n                    width: \"100%\",\r\n                    filter: \"drop-shadow(0px 0px 10px rgba(0, 0, 0, 0.25))\",\r\n                }}\r\n            />\r\n        );\r\n    } else {\r\n        authorCover = (\r\n            <Box\r\n                sx={{\r\n                    pt: 8,\r\n                    pr: 2,\r\n                    pl: 1,\r\n                    borderRadius: 2,\r\n                    backgroundColor: \"#2F2F2F\",\r\n                    height: 2 / 3,\r\n                    width: \"100%\",\r\n                    filter: \"drop-shadow(0px 0px 10px rgba(0, 0, 0, 0.25))\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    alignItems: \"center\",\r\n                    textAlign: \"center\",\r\n                }}\r\n            >\r\n                <Typography\r\n                    gutterBottom\r\n                    variant=\"h5\"\r\n                    component=\"div\"\r\n                    color=\"primary.contrastText\"\r\n                >\r\n                    {data.name}\r\n                </Typography>\r\n            </Box>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Grid onClick={() => handleClick()} item key={index}>\r\n            <Card elevation={0}>\r\n                <CardActionArea sx={{height: 500, width: 195}}>\r\n                    {authorCover}\r\n                    <CardContent sx={{height: 1 / 3, width: \"100%\"}}>\r\n                        <Typography\r\n                            gutterBottom\r\n                            variant=\"h5\"\r\n                            component=\"div\"\r\n                            sx={{textOverflow: \"ellipsis\"}}\r\n                        >\r\n                            {data.name}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                            {data.birthDate ? dateFormat(data.birthDate) : \"\"} {data.deathDate && dateFormat(data.deathDate) != '' ? (\" - \" + dateFormat(data.deathDate)) : \"\"}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default AuthorResult;\r\n","import React from \"react\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport BookResult from \"./BookResult\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport AuthorResult from \"./AuthorResult\";\r\n\r\nexport default function Results({ type, data }) {\r\n  let navigate = useNavigate();\r\n\r\n  return (\r\n    <div>\r\n      {data === null ? (\r\n        <div>Loading</div>\r\n      ) : data.length === 0 ? (\r\n        <div></div>\r\n      ) : (\r\n        <Grid\r\n          container\r\n          spacing={2}\r\n          direction=\"row\"\r\n          justifyContent=\"flex-start\"\r\n          alignItems=\"flex-start\"\r\n        >\r\n          {type === \"Book\" &&\r\n            data.map((obj, index) => {\r\n              const bookData = {\r\n                title: obj.name.value,\r\n                author: obj.authorNames.value,\r\n                img: obj.imageUrl?.value,\r\n                releaseDate: obj.releaseDate?.value,\r\n                bookURI: obj.book.value.split(\r\n                  \"http://dbpedia.org/resource/\"\r\n                )[1],\r\n              };\r\n              return (\r\n                <BookResult index={index} data={bookData} navigate={navigate} />\r\n              );\r\n            })}\r\n          {type === \"Author\" &&\r\n            data.map((obj, index) => {\r\n              const authorData = {\r\n                name: obj.name.value,\r\n                img: obj.imageUrl?.value,\r\n                birthDate: obj.birthDate?.value ?? \"\",\r\n                deathDate: obj.deathDate?.value ?? \"\",\r\n                authorURI: obj.writer.value.split(\r\n                  \"http://dbpedia.org/resource/\"\r\n                )[1],\r\n              };\r\n              return AuthorResult(index, authorData, navigate, null);\r\n            })}\r\n        </Grid>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@mui/material/Button\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport {\r\n  autocompleteQuery,\r\n  getAuthors,\r\n  getBookSearch,\r\n  getAuthorSearch,\r\n} from \"../services/sparqlRequests\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport Autocomplete from \"@mui/material/Autocomplete\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport parse from \"autosuggest-highlight/parse\";\r\nimport match from \"autosuggest-highlight/match\";\r\nimport Results from \"./Results\";\r\n\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../lotties/book-loading.json\";\r\n\r\nimport ToggleButton from \"@mui/material/ToggleButton\";\r\nimport ToggleButtonGroup from \"@mui/material/ToggleButtonGroup\";\r\n\r\nexport default function SearchPage() {\r\n  //used to push a new page to the history stack\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [viewableResults, setViewableResults] = useState([]);\r\n  const [offset, setOffset] = useState(1);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  /**\r\n   * Set animation settings\r\n   */\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n  /**\r\n   * Searches the list of corresponding books that match with textfield value\r\n   * @param {*} event\r\n   */\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const data = new FormData(event.currentTarget);\r\n    const searchInput = data.get(\"search\");\r\n    setIsLoading(true);\r\n    if (searchType === \"Book\") {\r\n      const bookResponse = await getBookSearch(searchInput);\r\n      setSearchResults(bookResponse);\r\n      setViewableResults(bookResponse.slice(0, 50));\r\n    } else if (searchType === \"Author\") {\r\n      const authorResponse = await getAuthorSearch(searchInput);\r\n      setSearchResults(authorResponse);\r\n      setViewableResults(authorResponse.slice(0, 50));\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n  /**\r\n   * Searches the list of corresponding books that match with textfield value\r\n   * @param {*} event\r\n   */\r\n  const handleNext = () => {\r\n    setIsLoading(true);\r\n    setOffset(offset + 1);\r\n    setViewableResults(searchResults.slice(0, (offset + 1) * 50));\r\n    setIsLoading(false);\r\n  };\r\n\r\n  //Autocomplete parameters (source :https://mui.com/components/autocomplete/)\r\n  const [open, setOpen] = useState(false);\r\n  const [options, setOptions] = useState([]);\r\n  const [value, setValue] = useState(\"\");\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [highlightedOption, setHighlightedOption] = useState(0);\r\n  const [searchType, setSearchType] = React.useState(\"Book\");\r\n\r\n  const loading = open && options.length === 0;\r\n\r\n  /**\r\n   * Searches the list of corresponding books and authors that match with textfield value\r\n   * @param {*} event\r\n   */\r\n  const handleInputChange = async (event) => {\r\n    event.preventDefault();\r\n    const response = await autocompleteQuery(event.target.value);\r\n    setOptions([...response]);\r\n  };\r\n\r\n  const handleSelectorChange = (event, newSearchType) => {\r\n    if (newSearchType) {\r\n      setSearchType(newSearchType);\r\n      setSearchResults([]);\r\n      setViewableResults([]);\r\n      setInputValue(\"\");\r\n      setOffset(1);\r\n    }\r\n  };\r\n\r\n  const handleChange = async (event, newValue) => {\r\n    event.preventDefault();\r\n    setIsLoading(true);\r\n    let queryText=\"\"\r\n    if (newValue.name === undefined) {\r\n      setValue(newValue);\r\n      setInputValue(newValue);\r\n      queryText = newValue;\r\n    } else {\r\n      setValue(newValue.name.value);\r\n      setInputValue(newValue.name.value);\r\n      queryText = newValue.name.value;\r\n    }\r\n    if (searchType === \"Book\") {\r\n      const bookResponse = await getBookSearch(queryText);\r\n      setSearchResults(bookResponse);\r\n      setViewableResults(bookResponse.slice(0, 50));\r\n    } else if (searchType === \"Author\") {\r\n      const authorResponse = await getAuthorSearch(queryText);\r\n      setSearchResults(authorResponse);\r\n      setViewableResults(authorResponse.slice(0, 50));\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const handleKeyDown = async (event) => {\r\n    if (event.key === \"ArrowRight\" && highlightedOption != null) {\r\n      setInputValue(highlightedOption.name.value);\r\n      setValue(highlightedOption.name.value);\r\n    }\r\n\r\n    if (event.key === \"Enter\") {\r\n      if (highlightedOption === null) {\r\n        event.defaultMuiPrevented = true;\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!open) {\r\n      setOptions([]);\r\n    } else {\r\n      (async () => {\r\n        if (value.length > 0) {\r\n          const response = await autocompleteQuery(value);\r\n          setOptions([...response]);\r\n        } else {\r\n          setOptions([]);\r\n        }\r\n      })();\r\n    }\r\n  }, [open, value]);\r\n\r\n  return (\r\n    <Box\r\n      component=\"form\"\r\n      onSubmit={handleSubmit}\r\n      noValidate\r\n      sx={{\r\n        mt: 1,\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        width: 1,\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{\r\n          width: 1,\r\n          display: \"flex\",\r\n          flexDirection: \"row \",\r\n        }}\r\n      >\r\n        <Autocomplete\r\n          freeSolo\r\n          margin=\"normal\"\r\n          required\r\n          fullWidth\r\n          id=\"submit\"\r\n          name=\"submit\"\r\n          disableClearable\r\n          inputValue={inputValue}\r\n          onInputChange={(event, newInputValue) => {\r\n            if (event != null && event.type === \"change\") {\r\n              setInputValue(newInputValue);\r\n              setValue(event.target.value);\r\n              handleInputChange(event);\r\n            }\r\n          }}\r\n          onChange={(event, newValue) => {\r\n            handleChange(event, newValue);\r\n          }}\r\n          onKeyDown={(event) => {\r\n            handleKeyDown(event);\r\n          }}\r\n          onHighlightChange={(event, option) => {\r\n            setHighlightedOption(option);\r\n          }}\r\n          sx={{\r\n            border: \"1px solid #D8D8D8\",\r\n            boxSizing: \"border-box\",\r\n            boxShadow: \"0px 0px 8px rgba(135, 135, 135, 0.25)\",\r\n            borderRadius: 2,\r\n            \"&:hover\": {\r\n              boxShadow: \"0px 0px 16px rgba(135, 135, 135, 0.25)\",\r\n            },\r\n            height: 1,\r\n          }}\r\n          open={open}\r\n          onOpen={() => {\r\n            setOpen(true);\r\n          }}\r\n          onClose={() => {\r\n            setOpen(false);\r\n          }}\r\n          options={options.sort((a, b) =>\r\n            a.type.value.localeCompare(b.type.value)\r\n          )}\r\n          groupBy={(option) => option.type.value}\r\n          getOptionLabel={(option) => option.name?.value}\r\n          loading={loading}\r\n          renderInput={(params) => (\r\n            <TextField\r\n              id=\"search\"\r\n              name=\"search\"\r\n              label=\"Search your book by name or author\"\r\n              {...params}\r\n              InputProps={{\r\n                ...params.InputProps,\r\n                endAdornment: (\r\n                  <>\r\n                    {loading ? (\r\n                      <CircularProgress color=\"inherit\" size={20} />\r\n                    ) : null}\r\n                    {params.InputProps.endAdornment}\r\n                  </>\r\n                ),\r\n              }}\r\n            />\r\n          )}\r\n          renderOption={(props, option, { inputValue }) => {\r\n            const matches = match(option.name.value, inputValue);\r\n            const parts = parse(option.name.value, matches);\r\n\r\n            return (\r\n              <li {...props}>\r\n                <div>\r\n                  {parts.map((part, index) => (\r\n                    <span\r\n                      key={index}\r\n                      style={{\r\n                        fontWeight: part.highlight ? 700 : 400,\r\n                      }}\r\n                    >\r\n                      {part.text}\r\n                    </span>\r\n                  ))}\r\n                </div>\r\n              </li>\r\n            );\r\n          }}\r\n        />\r\n        <ToggleButtonGroup\r\n          color=\"primary\"\r\n          value={searchType}\r\n          exclusive\r\n          onChange={handleSelectorChange}\r\n          sx={{\r\n            pl: 2,\r\n          }}\r\n        >\r\n          <ToggleButton value=\"Book\">Books</ToggleButton>\r\n          <ToggleButton value=\"Author\">Author</ToggleButton>\r\n        </ToggleButtonGroup>\r\n      </Box>\r\n      <Button\r\n        type=\"submit\"\r\n        variant=\"contained\"\r\n        size=\"large\"\r\n        endIcon={<SearchIcon />}\r\n        sx={{ mt: 3, mb: 2, width: \"300px\" }}\r\n      >\r\n        Search{\" \"}\r\n      </Button>\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          flexWrap: \"wrap\",\r\n          bgcolor: \"background.paper\",\r\n        }}\r\n      >\r\n        <InfiniteScroll\r\n          dataLength={viewableResults.length} //This is important field to render the next data\r\n          next={handleNext}\r\n          hasMore={true}\r\n          loader={\r\n            isLoading ? (\r\n              <Lottie options={defaultOptions} height={200} width={200} />\r\n            ) : null\r\n          }\r\n          endMessage={\r\n            <p style={{ textAlign: \"center\" }}>\r\n              <b>End of results</b>\r\n            </p>\r\n          }\r\n        >\r\n          <Results type={searchType} data={viewableResults} />\r\n        </InfiniteScroll>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\n\r\nimport Box from \"@mui/material/Box\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport SearchPage from \"./SearchPage\";\r\n\r\nexport default function Browser() {\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      spacing={0}\r\n      direction=\"column\"\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\"\r\n      sx={{ minHeight: \"100vh\", minWidth: 2 / 3 }}\r\n    >\r\n      <Grid item>\r\n        <Box\r\n          sx={{\r\n            minWidth: 600,\r\n            marginTop: 8,\r\n            ml: 8,\r\n            mr: 8,\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            alignItems: \"center\",\r\n            maxWidth: 1500,\r\n          }}\r\n        >\r\n          <Box\r\n            sx={{\r\n              width: 1,\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <Typography component=\"h1\" variant=\"h1\" sx={{ mb: 5 }}>\r\n              LibrairIf\r\n            </Typography>\r\n            <SearchPage />\r\n          </Box>\r\n        </Box>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}","export const lightTheme = {\r\n  palette: {\r\n    type: \"light\",\r\n    primary: {\r\n      main: \"#000000\",\r\n      dark: \"#1c1c1c\",\r\n    },\r\n    secondary: {\r\n      main: \"#373737\",\r\n    },\r\n    text: {\r\n      secondary: \"rgba(89, 89, 89, 1))\",\r\n    },\r\n  },\r\n  typography: {\r\n    h5: {\r\n      fontFamily: \"Oswald\",\r\n      fontWeight: 400,\r\n    },\r\n    h4: {\r\n      fontFamily: \"Oswald\",\r\n      fontWeight: 300,\r\n    },\r\n    h1: {\r\n      fontFamily: \"Oswald\",\r\n      fontWeight: 500,\r\n      fontSize: \"4.9rem\",\r\n    },\r\n    h2: {\r\n      fontFamily: \"Oswald\",\r\n      fontWeight: 400,\r\n    },\r\n    h3: {\r\n      fontFamily: \"Oswald\",\r\n      fontWeight: 300,\r\n    },\r\n    h6: {\r\n      fontFamily: \"EB Garamond\",\r\n      fontWeight: 500,\r\n    },\r\n    button: {\r\n      fontFamily: \"Oswald\",\r\n    },\r\n    fontFamily: \"Oswald\",\r\n    subtitle1: {\r\n      fontFamily: \"EB Garamond\",\r\n    },\r\n    subtitle2: {\r\n      fontFamily: \"EB Garamond\",\r\n    },\r\n    body1: {\r\n      fontFamily: \"EB Garamond\",\r\n    },\r\n    body2: {\r\n      fontFamily: \"EB Garamond\",\r\n    },\r\n    caption: {\r\n      fontFamily: \"EB Garamond\",\r\n    },\r\n    overline: {\r\n      fontFamily: \"EB Garamond\",\r\n    },\r\n  },\r\n};\r\n","import CardMedia from \"@mui/material/CardMedia\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport {CardActionArea, Grid} from \"@mui/material\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport * as React from \"react\";\r\n\r\n//navigate(`../../bookInfo/${data.bookURI}`);\r\n\r\n/**\r\n * @param props\r\n * onClick\r\n * img\r\n * title\r\n * subtitle\r\n * secondaryTitle\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nconst CardResult = (props) => {\r\n    //console.log(\"Data\" + JSON.stringify(props.data))\r\n    let bookCover;\r\n    if (props.img) {\r\n        bookCover = (\r\n            <CardMedia\r\n                component=\"img\"\r\n                image={props.img}\r\n                alt=\"miniature\"\r\n                sx={{\r\n                    borderRadius: 2,\r\n                    height: 2 / 3,\r\n                    width: \"100%\",\r\n                    filter: \"drop-shadow(0px 0px 10px rgba(0, 0, 0, 0.25))\",\r\n                }}\r\n            />\r\n        );\r\n    } else {\r\n        bookCover = (\r\n            <Box\r\n                sx={{\r\n                    pt: 8,\r\n                    pr: 2,\r\n                    pl: 1,\r\n                    borderRadius: 2,\r\n                    backgroundColor: \"#2F2F2F\",\r\n                    height: 2 / 3,\r\n                    width: \"100%\",\r\n                    filter: \"drop-shadow(0px 0px 10px rgba(0, 0, 0, 0.25))\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    alignItems: \"center\",\r\n                    textAlign: \"center\",\r\n                }}\r\n            >\r\n                <Typography\r\n                    gutterBottom\r\n                    variant=\"h5\"\r\n                    component=\"div\"\r\n                    color=\"primary.contrastText\"\r\n                    sx={{ textOverflow: \"ellipsis\" }}\r\n                >\r\n                    {props.title}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"#DBDBDB\">\r\n                    {props.subtitle}\r\n                </Typography>\r\n            </Box>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Grid onClick={() => props.onClick()} item>\r\n            <Card elevation={0}>\r\n                <CardActionArea sx={{ height: 500, width: 195 }}>\r\n                    {bookCover}\r\n                    <CardContent sx={{ height: 1 / 3, width: \"100%\" }}>\r\n                        <Typography\r\n                            gutterBottom\r\n                            variant=\"h5\"\r\n                            component=\"div\"\r\n                            sx={{ textOverflow: \"ellipsis\" }}\r\n                        >\r\n                            {props.title}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                            {props.secondaryTitle}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default CardResult;","import {\r\n    fetchBookInfo,\r\n    fetchAssociatedGames,\r\n    fetchAssociatedMovies,\r\n    fetchAssociatedMusicals,\r\n    fetchAssociatedTVShow,\r\n    fetchAssociatedMusics,\r\n    fetchListInSeries,\r\n    fetchBookNeighbor,\r\n    fetchSameGenreBooks,\r\n    fetchBookAssociatedToAuthor,\r\n} from \"../services/sparqlRequests\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport \"./Books.css\";\r\nimport {useNavigate, Link} from \"react-router-dom\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Box from \"@mui/material/Box\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport ArrowBackRounded from \"@bit/mui-org.material-ui-icons.arrow-back-rounded\";\r\nimport * as React from \"react\";\r\nimport BookResult from \"./BookResult\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport CardResult from \"./CardResult\";\r\n\r\nconst Books = () => {\r\n    let {bookURI} = useParams();\r\n    let navigate = useNavigate();\r\n    const [bookInfo, setBookInfo] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [isLoadingSupp, setIsLoadingSupp] = useState(true);\r\n    const [error, setError] = useState(false);\r\n    const [errorSupp, setErrorSupp] = useState(false);\r\n\r\n    const [associatedGames, setAssociatedGames] = useState(null);\r\n    const [associatedMovies, setAssociatedMovies] = useState(null);\r\n    const [associatedMusicals, setAssociatedMusicals] = useState(null);\r\n    const [associatedTVShows, setAssociatedTVShows] = useState(null);\r\n    const [associatedMusics, setAssociatedMusics] = useState(null);\r\n\r\n    const [seriesOfBook, setSeriesOfBook] = useState(null);\r\n    const [neighbors, setNeighbors] = useState(null);\r\n    const [sameGenreBooks, setSameGenreBooks] = useState([]);\r\n    const [sameAuthorBooks, setSameAuthorBooks] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const loadBookInfo = async () => {\r\n            const response = await fetchBookInfo(bookURI);\r\n            if (response.length === 0) {\r\n                setError(true);\r\n            }\r\n            const content = response[0];\r\n            //console.log(content);\r\n\r\n            const bookData = {\r\n                name: content.name?.value,\r\n                abstract: content.abstract?.value,\r\n                authorURI: content.authorURI?.value.split(\r\n                    \"http://dbpedia.org/resource/\"\r\n                )[1],\r\n                authorName: content.authorName?.value,\r\n                publishersURI: content.publishersURI?.value.split(\",\"),\r\n                publishers: content.publishers?.value.split(\",\"),\r\n                releaseDates: content.releaseDates?.value.split(\",\"),\r\n                genres: content.genres.value?.split(\",\"),\r\n                imageURL: content.imageURL?.value,\r\n            };\r\n            //console.log(bookData);\r\n            setBookInfo(bookData);\r\n        };\r\n\r\n        const loadAssociatedSeriesOfBook = async () => {\r\n            const response = await fetchListInSeries(bookURI);\r\n            setSeriesOfBook(response);\r\n        };\r\n        const loadBookNeighbors = async () => {\r\n            const response = await fetchBookNeighbor(bookURI);\r\n            setNeighbors(response);\r\n        };\r\n\r\n        const loadSameGenreBooks = async () => {\r\n            const response = await fetchSameGenreBooks(bookURI);\r\n            setSameGenreBooks(response);\r\n        };\r\n\r\n        const load = async () => {\r\n            setIsLoading(true);\r\n            try {\r\n                await loadBookInfo();\r\n                await loadAssociatedSeriesOfBook();\r\n                await loadBookNeighbors();\r\n                await loadSameGenreBooks();\r\n            } catch (err) {\r\n                //console.log(err);\r\n            }\r\n            setIsLoading(false);\r\n        };\r\n        load();\r\n    }, [bookURI]);\r\n\r\n    useEffect(() => {\r\n        const loadAssociatedWork = async () => {\r\n            //console.log(\"loading\");\r\n            try {\r\n                const responseBook = await fetchBookAssociatedToAuthor(\r\n                    bookInfo.authorURI\r\n                );\r\n                const authorBooks = responseBook.filter((book) => {\r\n                    return book.name.value !== bookInfo.name;\r\n                });\r\n                //console.log(authorBooks);\r\n                setSameAuthorBooks(authorBooks);\r\n                const games = await fetchAssociatedGames(\r\n                    bookInfo.name,\r\n                    bookInfo.authorName\r\n                );\r\n                setAssociatedGames(games);\r\n                const movies = await fetchAssociatedMovies(\r\n                    bookInfo.name,\r\n                    bookInfo.authorName\r\n                );\r\n                setAssociatedMovies(movies);\r\n                const musicals = await fetchAssociatedMusicals(\r\n                    bookInfo.name,\r\n                    bookInfo.authorName\r\n                );\r\n                setAssociatedMusicals(musicals);\r\n                const tvShows = await fetchAssociatedTVShow(\r\n                    bookInfo.name,\r\n                    bookInfo.authorName\r\n                );\r\n                setAssociatedTVShows(tvShows);\r\n                const musics = await fetchAssociatedMusics(\r\n                    bookInfo.name,\r\n                    bookInfo.authorName\r\n                );\r\n                setAssociatedMusics(musics);\r\n                //console.log(\"Associated games = \" + JSON.stringify(games))\r\n                //console.log(\"Associated movies = \" + JSON.stringify(movies))\r\n                //console.log(\"Associated musicals = \" + JSON.stringify(musicals))\r\n                //console.log(\"Associated tv shows = \" + JSON.stringify(tvShows))\r\n                //console.log(\"Associated musics = \" + JSON.stringify(musics))\r\n            } catch (err) {\r\n                //console.log(err);\r\n                setErrorSupp(true);\r\n            }\r\n            setIsLoadingSupp(false);\r\n        };\r\n\r\n        if (\r\n            bookInfo !== null &&\r\n            bookInfo.authorName !== undefined &&\r\n            bookInfo.authorURI !== undefined\r\n        ) {\r\n            setErrorSupp(false);\r\n            loadAssociatedWork();\r\n        } else {\r\n            //console.log(bookInfo);\r\n            setIsLoadingSupp(false);\r\n            setErrorSupp(true);\r\n        }\r\n    }, [bookInfo]);\r\n\r\n    const render = () => {\r\n        return (\r\n            <>\r\n                {error && (\r\n                    <Box\r\n                        display={\"flex\"}\r\n                        alignItems={\"center\"}\r\n                        justifyContent={\"center\"}\r\n                        height={\"100vh\"}\r\n                    >\r\n                        <Typography fontWeight={\"bold\"} fontSize={\"30px\"}>\r\n                            Resource not available\r\n                        </Typography>\r\n                    </Box>\r\n                )}\r\n                {!error && isLoading && (\r\n                    <Box\r\n                        display={\"flex\"}\r\n                        alignItems={\"center\"}\r\n                        justifyContent={\"center\"}\r\n                        height={\"100vh\"}\r\n                    >\r\n                        <CircularProgress/>\r\n                    </Box>\r\n                )}\r\n                {!error && !isLoading && bookInfo !== null && (\r\n                    <div className={\"bookContainer\"}>\r\n                        <div className={\"historyBack\"}>\r\n                            <IconButton\r\n                                onClick={() => navigate(-1, {state: setIsLoading(true)})}\r\n                                aria-label=\"delete\"\r\n                                size=\"large\"\r\n                            >\r\n                                <ArrowBackRounded fontSize=\"inherit\"/>\r\n                            </IconButton>\r\n                        </div>\r\n                        <div className={\"titleWrapper\"}>\r\n                            <h1 className={\"bookTitle\"}>{bookInfo.name}</h1>\r\n                            <div className={\"authorWrapper\"}>\r\n                <span className={\"author\"}>\r\n                  {bookInfo.authorName ? (\r\n                      <Link to={`../../authorInfo/${bookInfo.authorURI}`}>\r\n                          {\" \"}\r\n                          {bookInfo.authorName}\r\n                      </Link>\r\n                  ) : (\r\n                      bookInfo.authorURI\r\n                  )}\r\n                </span>\r\n                            </div>\r\n                            <div className={\"mainContent\"}>\r\n                                <div className={\"abstractWrapper\"}>\r\n                                    <h2>Abstract</h2>\r\n                                    {bookInfo.abstract}\r\n                                </div>\r\n                                <div className={\"imageWrapper\"}>\r\n                                    {bookInfo.imageURL ? (\r\n                                        <img src={bookInfo.imageURL}/>\r\n                                    ) : (\r\n                                        <Box\r\n                                            minWidth={\"200px\"}\r\n                                            minHeight={\"300px\"}\r\n                                            sx={{\r\n                                                pt: 8,\r\n                                                pr: 2,\r\n                                                pl: 1,\r\n                                                borderRadius: 2,\r\n                                                backgroundColor: \"#2F2F2F\",\r\n                                                height: 2 / 3,\r\n                                                filter: \"drop-shadow(0px 0px 10px rgba(0, 0, 0, 0.25))\",\r\n                                                display: \"flex\",\r\n                                                flexDirection: \"column\",\r\n                                                alignItems: \"center\",\r\n                                                textAlign: \"center\",\r\n                                            }}\r\n                                        >\r\n                                            <Typography\r\n                                                gutterBottom\r\n                                                variant=\"h5\"\r\n                                                component=\"div\"\r\n                                                color=\"primary.contrastText\"\r\n                                            >\r\n                                                {bookInfo.name}\r\n                                            </Typography>\r\n                                            <Typography variant=\"body2\" color=\"#DBDBDB\">\r\n                                                {bookInfo.authorName}\r\n                                            </Typography>\r\n                                        </Box>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                            <div style={{\"margin-bottom\": \"10px\"}}>\r\n                                <h2>Info</h2>\r\n                                <div className={\"infoWrapper\"}>\r\n                                    {bookInfo.publishers[0] !== \"\" ? (\r\n                                        <>\r\n                                            <div className={\"publishersWrapper\"}>Publishers</div>\r\n                                            <div className={\"publishersWrapper\"}>\r\n                        <span>\r\n                          {\" \"}\r\n                            {bookInfo.publishers.map((publisher, index) => {\r\n                                return (\r\n                                    <span>\r\n                                <Link\r\n                                    to={`../../editorInfo/${\r\n                                        bookInfo.publishersURI[index].split(\r\n                                            \"http://dbpedia.org/resource/\"\r\n                                        )[1]\r\n                                    }`}\r\n                                >\r\n                                  {publisher}\r\n                                </Link>\r\n                                        {index !== bookInfo.publishers.length - 1 && (\r\n                                            <span>,</span>\r\n                                        )}\r\n                              </span>\r\n                                );\r\n                            })}\r\n                        </span>\r\n                                            </div>\r\n                                        </>\r\n                                    ) : null}\r\n                                    {bookInfo.releaseDates[0] !== \"\" ? (\r\n                                        <>\r\n                                            <div className={\"releaseDateWrapper\"}>\r\n                                                <span>Release Date</span>\r\n                                            </div>\r\n                                            <div className={\"releaseDateWrapper\"}>\r\n                        <span>\r\n                          {\" \"}\r\n                            {bookInfo.releaseDates.map((date, index) => {\r\n                                return (\r\n                                    <span>\r\n                                {date}\r\n                                        {index !== bookInfo.releaseDates.length - 1 && (\r\n                                            <span>,</span>\r\n                                        )}\r\n                              </span>\r\n                                );\r\n                            })}\r\n                        </span>\r\n                                            </div>\r\n                                        </>\r\n                                    ) : null}\r\n                                    {bookInfo.titleOrig ? (\r\n                                        <>\r\n                                            <div className={\"titleOrig\"}>\r\n                                                <span>Original Title</span>\r\n                                            </div>\r\n                                            <div className={\"titleOrig\"}>\r\n                                                <span> {bookInfo.titleOrig}</span>\r\n                                            </div>\r\n                                        </>\r\n                                    ) : null}\r\n\r\n                                    {bookInfo.genres[0] !== \"\" ? (\r\n                                        <>\r\n                                            <div className={\"literaryGenres\"}>\r\n                                                <span>Literary genre </span>\r\n                                            </div>\r\n                                            <div className={\"literaryGenres\"}>\r\n                        <span>\r\n                          {\" \"}\r\n                            {bookInfo.genres.map((genre, index) => {\r\n                                return (\r\n                                    <span>\r\n                                {genre}\r\n                                        {index !== bookInfo.genres.length - 1 && (\r\n                                            <span>,</span>\r\n                                        )}\r\n                              </span>\r\n                                );\r\n                            })}\r\n                        </span>\r\n                                            </div>\r\n                                        </>\r\n                                    ) : null}\r\n                                </div>\r\n                            </div>\r\n                            {errorSupp && (\r\n                                <Box\r\n                                    display={\"flex\"}\r\n                                    alignItems={\"center\"}\r\n                                    justifyContent={\"center\"}\r\n                                    height={\"100%\"}\r\n                                >\r\n                                    <Typography fontWeight={\"bold\"} fontSize={\"30px\"}>\r\n                                        Resource not available\r\n                                    </Typography>\r\n                                </Box>\r\n                            )}\r\n                            {!errorSupp && !isLoadingSupp && (\r\n                                <div>\r\n                                    {neighbors.length !== 0 && (\r\n                                        <>\r\n                                            <div className={\"relatedWrapper\"}>\r\n                                                <h3>Neighbor books</h3>\r\n                                                <div className={\"otherResourceWrapper\"}>\r\n                                                    {neighbors.map((obj, index) => {\r\n                                                        const bookData = {\r\n                                                            title: obj.name?.value,\r\n                                                            bookURI: obj.book?.value.split(\r\n                                                                \"http://dbpedia.org/resource/\"\r\n                                                            )[1],\r\n                                                        };\r\n\r\n                                                        return (\r\n                                                            <div className={\"cardWrapper\"}>\r\n                                                                <BookResult\r\n                                                                    key={index}\r\n                                                                    index={index}\r\n                                                                    data={bookData}\r\n                                                                    navigate={navigate}\r\n                                                                />\r\n                                                            </div>\r\n                                                        );\r\n                                                    })}\r\n                                                </div>\r\n                                            </div>\r\n                                        </>\r\n                                    )}\r\n                                    {seriesOfBook.length !== 0 && (\r\n                                        <>\r\n                                            <div className={\"relatedWrapper\"}>\r\n                                                <h3>From the same series</h3>\r\n                                                <div className={\"otherResourceWrapper\"}>\r\n                                                    {seriesOfBook.map((obj, index) => {\r\n                                                        const bookData = {\r\n                                                            title: obj.name?.value,\r\n                                                            author: obj.authorNames?.value,\r\n                                                            img: obj.imageUrl?.value,\r\n                                                            releaseDate: obj.releaseDate?.value,\r\n                                                            bookURI: obj.book?.value.split(\r\n                                                                \"http://dbpedia.org/resource/\"\r\n                                                            )[1],\r\n                                                        };\r\n\r\n                                                        return (\r\n                                                            <div className={\"cardWrapper\"}>\r\n                                                                <BookResult\r\n                                                                    key={index}\r\n                                                                    index={index}\r\n                                                                    data={bookData}\r\n                                                                    navigate={navigate}\r\n                                                                />\r\n                                                            </div>\r\n                                                        );\r\n                                                    })}\r\n                                                </div>\r\n                                            </div>\r\n                                        </>\r\n                                    )}\r\n                                    {sameAuthorBooks.length !== 0 && (\r\n                                        <>\r\n                                            <div className={\"relatedWrapper\"}>\r\n                                                <h3>From the same author</h3>\r\n                                                <div className={\"otherResourceWrapper\"}>\r\n                                                    {sameAuthorBooks.map((obj, index) => {\r\n                                                        const bookData = {\r\n                                                            title: obj.name?.value,\r\n                                                            author: obj.authorNames?.value,\r\n                                                            img: obj.imageUrl?.value,\r\n                                                            releaseDate: obj.releaseDate?.value,\r\n                                                            bookURI: obj.book?.value.split(\r\n                                                                \"http://dbpedia.org/resource/\"\r\n                                                            )[1],\r\n                                                        };\r\n\r\n                                                        return (\r\n                                                            <div className={\"cardWrapper\"}>\r\n                                                                <BookResult\r\n                                                                    key={index}\r\n                                                                    index={index}\r\n                                                                    data={bookData}\r\n                                                                    navigate={navigate}\r\n                                                                />\r\n                                                            </div>\r\n                                                        );\r\n                                                    })}\r\n                                                </div>\r\n                                            </div>\r\n                                        </>\r\n                                    )}\r\n                                    {sameGenreBooks.length !== 0 && (\r\n                                        <div className={\"relatedWrapper\"}>\r\n                                            <h3>From the same genre</h3>\r\n                                            <div className={\"otherResourceWrapper\"}>\r\n                                                {sameGenreBooks.map((obj, index) => {\r\n                                                    const bookData = {\r\n                                                        title: obj.name?.value,\r\n                                                        author: obj.authorNames?.value,\r\n                                                        img: obj.imageUrl?.value,\r\n                                                        releaseDate: obj.releaseDate?.value,\r\n                                                        bookURI: obj.book?.value.split(\r\n                                                            \"http://dbpedia.org/resource/\"\r\n                                                        )[1],\r\n                                                    };\r\n\r\n                                                    return (\r\n                                                        <div className={\"cardWrapper\"}>\r\n                                                            <BookResult\r\n                                                                key={index}\r\n                                                                index={index}\r\n                                                                data={bookData}\r\n                                                                navigate={navigate}\r\n                                                            />\r\n                                                        </div>\r\n                                                    );\r\n                                                })}\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                    {associatedGames !== null && associatedGames.length !== 0 && (\r\n                                        <div className={\"relatedWrapper\"}>\r\n                                            <h3>Related games</h3>\r\n                                            <div className={\"otherResourceWrapper\"}>\r\n                                                {associatedGames.map((game) => (\r\n                                                    <div className={\"cardWrapper\"}>\r\n                                                        <CardResult onClick={() => {\r\n                                                            window.open(`https://www.google.com/search?q=${game.game.value}+game`)\r\n                                                        }}\r\n                                                                    title={game.game.value}\r\n                                                                    secondaryTitle={`Developed by ${game.developerName.value} released in ${game.date.value}`}/>\r\n                                                    </div>\r\n                                                ))}\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                    {associatedMovies !== null && associatedMovies.length !== 0 && (\r\n                                        <div className={\"relatedWrapper\"}>\r\n                                            <h3>Related movies</h3>\r\n                                            <div className={\"otherResourceWrapper\"}>\r\n                                                {associatedMovies.map((movie) => (\r\n                                                    <div className={\"cardWrapper\"}>\r\n                                                        <CardResult onClick={() => {\r\n                                                            window.open(`https://www.google.com/search?q=${movie.movie.value}+movie`)\r\n                                                        }}\r\n                                                                    title={movie.movie.value}\r\n                                                                    secondaryTitle={`Produced by ${movie.producersName.value} lasting ${convertSecondsToHoursMinutesSeconds(movie.runtime.value)}`}\r\n                                                                    img={movie.thumbnail !== undefined ? movie.thumbnail.value : undefined}\r\n                                                        />\r\n                                                    </div>\r\n                                                ))}\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                    {associatedMusicals !== null && associatedMusicals.length !== 0 && (\r\n                                        <div className={\"relatedWrapper\"}>\r\n                                            <h3>Related musicals</h3>\r\n                                            <div className={\"otherResourceWrapper\"}>\r\n                                                {associatedMusicals.map((musical) => (\r\n                                                    <div className={\"cardWrapper\"}>\r\n                                                        <CardResult onClick={() => {\r\n                                                            window.open(`https://www.google.com/search?q=${musical.musical.value}+musical`)\r\n                                                        }}\r\n                                                                    title={musical.musical.value}\r\n                                                                    secondaryTitle={`Authored by ${musical.authorName.value}, lyrics by ${musical.lyricistName.value} and music composed by ${musical.composerName.value}`}\r\n                                                                    img={\"\"}\r\n                                                        />\r\n                                                    </div>\r\n                                                ))}\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                    {associatedTVShows !== null && associatedTVShows.length !== 0 && (\r\n                                        <div className={\"relatedWrapper\"}>\r\n                                            <h3>Related TV shows</h3>\r\n                                            <div className={\"otherResourceWrapper\"}>\r\n                                                {associatedTVShows.map((tvShow) => (\r\n                                                    <div className={\"cardWrapper\"}>\r\n                                                        <CardResult onClick={() => {\r\n                                                            window.open(`https://www.google.com/search?q=${tvShow.serie.value}+TV+show`)\r\n                                                        }}\r\n                                                                    title={`${tvShow.serie.value} - ${tvShow.season.value} Season(s)`}\r\n                                                                    secondaryTitle={`Written by ${tvShow.writer.value} and music composed by ${tvShow.composerName.value}`}\r\n                                                                    img={\"\"}\r\n                                                        />\r\n                                                    </div>\r\n                                                ))}\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                    {associatedMusics !== null && associatedMusics.length !== 0 && (\r\n                                        <div className={\"relatedWrapper\"}>\r\n                                            <h3>Related musics</h3>\r\n                                            <div className={\"otherResourceWrapper\"}>\r\n                                                {associatedMusics.map((music) => (\r\n                                                    <div className={\"cardWrapper\"}>\r\n                                                        <CardResult onClick={() => {\r\n                                                            window.open(`https://www.google.com/search?q=${music.music.value}+music`)\r\n                                                        }}\r\n                                                                    title={`${music.music.value}`}\r\n                                                                    secondaryTitle={`Artist : ${music.artistName.value}`}\r\n                                                                    img={\"\"}\r\n                                                        />\r\n                                                    </div>\r\n                                                ))}\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            )}\r\n                            {!errorSupp && isLoadingSupp && (\r\n                                <Box\r\n                                    display={\"flex\"}\r\n                                    alignItems={\"center\"}\r\n                                    justifyContent={\"center\"}\r\n                                    height={\"100vh\"}\r\n                                >\r\n                                    <CircularProgress/>\r\n                                </Box>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </>\r\n        );\r\n    };\r\n    return <>{render()}</>;\r\n};\r\n\r\nfunction convertSecondsToHoursMinutesSeconds(seconds) {\r\n    return new Date(seconds * 1000).toISOString().substr(11, 8);\r\n\r\n}\r\n\r\nexport default Books;\r\n","\r\nimport {fetchEditorInfo, fetchEditorBooks, fetchRelatedEditors} from '../services/sparqlRequests'\r\nimport \"./Editor.css\"\r\nimport {useEffect, useState} from \"react\";\r\nimport { useParams } from 'react-router';\r\nimport Box from \"@mui/material/Box\";\r\nimport BookResult from \"./BookResult\";\r\nimport * as React from \"react\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {CircularProgress, Link, Typography} from \"@mui/material\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport ArrowBackRounded from \"@bit/mui-org.material-ui-icons.arrow-back-rounded\";\r\n\r\n\r\n\r\nconst Editor = () => {\r\n\r\n    const [editorInfo, setEditorInfo] = useState(null);\r\n    const [editorBooks, setEditorBooks] = useState([]);\r\n    const [relatedEditors, setRelatedEditors] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(false);\r\n    let {editorURI} = useParams();\r\n    let navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n\r\n        const loadEditorInfo = async () => {\r\n            setIsLoading(true);\r\n            const response = await fetchEditorInfo(editorURI);\r\n            if (response.length === 0) {\r\n                setError(true);\r\n            }\r\n            //console.log(response);\r\n            setEditorInfo(response[0]);\r\n            setIsLoading(false);\r\n        }\r\n        loadEditorInfo();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        //console.log(editorInfo);\r\n        setIsLoading(false)\r\n\r\n        const loadEditorBooks = async () => {\r\n            const response = await fetchEditorBooks(editorURI);\r\n            //console.log(response);\r\n            setEditorBooks(response);\r\n        }\r\n        loadEditorBooks();\r\n    }, [editorInfo])\r\n\r\n    useEffect(() => {\r\n        \r\n        setIsLoading(false)\r\n\r\n        const loadRelatedEditors = async () => {\r\n            const response = await fetchRelatedEditors(editorURI);\r\n            setRelatedEditors(response);\r\n        }\r\n        loadRelatedEditors();\r\n    }, [editorInfo])\r\n\r\n    const render = () => {\r\n        return (\r\n            <div>\r\n                {error && <Box display={\"flex\"} alignItems={\"center\"} justifyContent={\"center\"} height={\"100vh\"}>\r\n                    <Typography fontWeight={\"bold\"} fontSize={\"30px\"}>\r\n                        Resource not available\r\n                    </Typography>\r\n                </Box>}\r\n                {editorInfo === null && !error &&\r\n                <Box\r\n                    display={\"flex\"}\r\n                    alignItems={\"center\"}\r\n                    justifyContent={\"center\"}\r\n                    height={\"100vh\"}\r\n                >\r\n                    <CircularProgress/>\r\n                </Box>}\r\n                {editorInfo !== null && !error &&\r\n\r\n                <div className={\"editorContainer\"}>\r\n                    <div className={\"historyBack\"}>\r\n                            <IconButton\r\n                                onClick={() => {\r\n                                    navigate(-1);\r\n                                }}\r\n                                aria-label=\"delete\"\r\n                                size=\"large\"\r\n                            >\r\n                                <ArrowBackRounded fontSize=\"inherit\"/>\r\n                            </IconButton>\r\n                    </div>\r\n                    <div className={\"nameWrapper\"}>\r\n                        <h1 className={\"editorName\"}>\r\n                            {editorInfo.label.value}\r\n                        </h1>\r\n                    </div>\r\n                    <div className={\"mainContent\"}>\r\n                        <div className={\"abstractWrapper\"}>\r\n                            <h2>Abstract</h2>\r\n                            {editorInfo.abstract?.value}\r\n                        </div>\r\n                        \r\n                        <div className={\"imageWrapper\"}>\r\n                            {editorInfo.imageURL ?\r\n                                <img src={editorInfo.imageURL.value}/> :\r\n                                <Box\r\n                                    sx={{\r\n                                        pt: 8,\r\n                                        pr: 2,\r\n                                        pl: 1,\r\n                                        borderRadius: 2,\r\n                                        backgroundColor: \"#2F2F2F\",\r\n                                        height: 2 / 3,\r\n                                        width: \"100%\",\r\n                                        filter: \"drop-shadow(0px 0px 10px rgba(0, 0, 0, 0.25))\",\r\n                                        display: \"flex\",\r\n                                        flexDirection: \"column\",\r\n                                        alignItems: \"center\",\r\n                                        textAlign: \"center\",\r\n                                    }}\r\n                                >\r\n                                    <Typography\r\n                                        gutterBottom\r\n                                        variant=\"h5\"\r\n                                        component=\"div\"\r\n                                        color=\"primary.contrastText\"\r\n                                    >\r\n                                            {editorInfo.label.value}\r\n                                    </Typography>\r\n                                        \r\n                                </Box>}\r\n                        </div>\r\n                        \r\n                    </div>\r\n                    <h2>Info</h2>\r\n                    <div className={\"infoWrapper\"}>\r\n                            \r\n                            {editorInfo.homepages.value !== \"\" ?\r\n                                    <>\r\n                                        <div className={\"valueWrapper\"}>\r\n                                            <span>Website</span>\r\n                                        \r\n                                        </div>\r\n                                        <span className={\"value\"}>\r\n                                                <a href={`${editorInfo.homepages?.value.split(\",\")[0]}`}>\r\n                                                    {\" \"}\r\n                                                    {editorInfo.homepages?.value.split(\",\")[0]}\r\n                                                </a>\r\n                                        </span>\r\n                                    </>\r\n                                    : null}\r\n                            {editorInfo.countries.value !== \"\" ?\r\n                                    <>\r\n                                        <div className={\"valueWrapper\"}>\r\n                                            <span>Country</span>\r\n                                        \r\n                                        </div>\r\n                                        <span className={\"value\"}>\r\n                                                {editorInfo.countries?.value.split(\",\")[0]}\r\n                                        </span>\r\n                                    </>\r\n                                    : null}\r\n                                    \r\n                                {editorInfo.foundation.value !== \"\" ?\r\n                                    <>                            \r\n                                        <div className={\"valueWrapper\"}>\r\n                                            <span>Founded</span>\r\n                                            \r\n                                        </div>     \r\n                                        <span className={\"valueWrapper\"}>\r\n                                                {editorInfo.foundation?.value.split(\",\")[0]}\r\n                                        </span>                                   \r\n                                    </>\r\n                                    : null}\r\n                                \r\n                                \r\n                                {editorInfo.founders.value !== \"\" ?\r\n                                    <>\r\n                                    <div className={\"valueWrapper\"}>\r\n                                            <span>Founders</span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <ul>\r\n                                                {editorInfo.founders?.value.split(\",\").map(founder => <li className=\"founder\">{founder.split(\"http://dbpedia.org/resource/\")[1].replace(/_/g, \" \")} </li>)}\r\n                                            </ul>\r\n                                        </div>\r\n                                    </>\r\n                                    : null}                     \r\n                                    \r\n                                    \r\n                    </div>\r\n                    <div>\r\n                        {editorBooks.length !=0 ?\r\n                            <>\r\n                            <h2> Published Books</h2>\r\n                            <div className={\"otherResourceWrapper\"}>\r\n                                {editorBooks.map((obj, index) => {\r\n                                    const bookData = {\r\n                                        title: obj.name?.value,\r\n                                        author: obj.authorNames?.value,\r\n                                        img: obj.imageUrl?.value,\r\n                                        releaseDate: obj.releaseDate?.value,\r\n                                        bookURI: obj.book?.value.split(\"http://dbpedia.org/resource/\")[1],\r\n                                    };\r\n                                    return (\r\n                                        <div className={\"cardWrapper\"}>\r\n                                            <BookResult key={index} index={index} data={bookData}\r\n                                                navigate={navigate} />\r\n                                        </div>\r\n                                    );\r\n                                })} \r\n                                \r\n                            </div>\r\n                            </>\r\n                        : null}\r\n                    </div>\r\n                    { editorInfo.countries !== null && !error &&\r\n\r\n                    \r\n                    <div>\r\n                        <h2> More Editors From {editorInfo.countries?.value.split(\",\")[0]}</h2>\r\n                        <div className={\"relatedEditors\"}>\r\n                            {relatedEditors.map((obj, index) => {\r\n                                const editorsData = {\r\n                                    name: obj.publisher?.value.split(\"http://dbpedia.org/resource/\")[1],\r\n                                };\r\n                                return (\r\n                                    <div>\r\n                                        <span className={\"editor\"}>\r\n                                            { (\r\n                                                <a href={`../../editorInfo/${editorsData.name}`}>\r\n                                                    {\" \"}\r\n                                                    {editorsData.name}\r\n                                                </a>\r\n                                            )}\r\n                                        </span>\r\n                                    </div>\r\n                                );\r\n                            })\r\n                            }\r\n                        </div>\r\n                    </div>}\r\n\r\n                </div>}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {render()}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Editor;","import * as React from 'react';\r\nimport Timeline from \"@mui/lab/Timeline\";\r\nimport TimelineItem from \"@mui/lab/TimelineItem\";\r\nimport TimelineSeparator from \"@mui/lab/TimelineSeparator\";\r\nimport TimelineConnector from \"@mui/lab/TimelineConnector\";\r\nimport TimelineContent from \"@mui/lab/TimelineContent\";\r\nimport TimelineDot from \"@mui/lab/TimelineDot\";\r\nimport TimelineOppositeContent from \"@mui/lab/TimelineOppositeContent\";\r\n\r\nimport CakeTwoToneIcon from '@mui/icons-material/CakeTwoTone';\r\nimport MenuBookTwoToneIcon from '@mui/icons-material/MenuBookTwoTone';\r\nimport LocalFireDepartmentTwoToneIcon from '@mui/icons-material/LocalFireDepartmentTwoTone';\r\n\r\nfunction TimelineElement(props) {\r\n    //console.log(\"data rendered\" + JSON.stringify(props.data));\r\n    return (\r\n        <React.Fragment>\r\n            <Timeline position=\"alternate\">\r\n                {props.data.map((obj) => {\r\n                    let value = <MenuBookTwoToneIcon/>;\r\n                    if (obj.type === \"birth\") {\r\n                        value = <CakeTwoToneIcon/>;\r\n                    } else if (obj.type === \"death\") {\r\n                        value = <LocalFireDepartmentTwoToneIcon/>;\r\n                    }\r\n                    return (\r\n                        <TimelineItem key={obj.date + \" \" + obj.work}>\r\n                            <TimelineOppositeContent color=\"text.secondary\">\r\n                                {obj.date}\r\n                            </TimelineOppositeContent>\r\n\r\n                            <TimelineSeparator>\r\n                                <TimelineDot>\r\n                                    {value}\r\n                                </TimelineDot>\r\n                                <TimelineConnector/>\r\n                            </TimelineSeparator>\r\n\r\n                            <TimelineContent>{obj.work}</TimelineContent>\r\n                        </TimelineItem>\r\n                    )\r\n                })}\r\n            </Timeline>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default TimelineElement;\r\n","import React from \"react\";\r\nimport {useEffect, useState, useRef} from \"react\";\r\nimport Tree from \"react-d3-tree\";\r\n\r\nconst containerStyles = {\r\n    width: \"100%\",\r\n    height: \"50vh\",\r\n    border: \"1px solid black\"\r\n};\r\n\r\nconst Card = ({nodeData}) => (\r\n    <div>\r\n        <div className=\"card\">\r\n            <div className=\"card-body\">\r\n                <h5 style={{margin: \"5px\"}} className=\"card-title\">\r\n                    {nodeData.attributes.title}\r\n                </h5>\r\n                <h6 style={{margin: \"5px\"}} className=\"card-subtitle mb-2 text-muted\">\r\n                    {nodeData.attributes.subtitle}\r\n                </h6>\r\n                <p style={{margin: \"5px\"}} className=\"card-text\">\r\n                    {nodeData.attributes.text}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\n\r\nconst click = event => {\r\n};\r\n\r\nconst over = event => {\r\n};\r\n\r\n//family : authorName\r\nlet FamilyTree = (props) => {\r\n\r\n    let [translateX, setTranslateX] = useState(0);\r\n    let [translateY, setTranslateY] = useState(0);\r\n    let treeContainer = useRef(null);\r\n    let state = {}; // translateX translateY\r\n    let height = 200;\r\n    let width = 500;\r\n    let yOffset = 80;\r\n    let yClearance = 150;\r\n\r\n    useEffect(() => {\r\n\r\n        const dimensions = treeContainer.getBoundingClientRect();\r\n        setTranslateX(dimensions.width / 2)\r\n        setTranslateY(yOffset)\r\n    }, [])\r\n\r\n    const data = {\r\n        spouse: props.family[0].spouse?.value,\r\n        children: props.family[0].children?.value.split(\";\"),\r\n    };\r\n\r\n\r\n    let author = {\r\n        name: props.authorName,\r\n    };\r\n\r\n    let children = [];\r\n    data.children.forEach((child) => {\r\n        children.push({\r\n            name: child,\r\n        });\r\n    });\r\n    if (children.length > 0) {\r\n        author.children = children;\r\n    }\r\n\r\n    let dataTree = author;\r\n\r\n    return (\r\n        <div style={containerStyles} ref={tc => (treeContainer = tc)}>\r\n            <Tree\r\n                data={dataTree}\r\n                collapsible={false}\r\n                translate={{\r\n                    x: translateX,\r\n                    y: translateY\r\n                }}\r\n                scaleExtent={{min: 0.1, max: 3}}\r\n                allowForeignObjects\r\n                pathFunc=\"elbow\"\r\n                orientation=\"vertical\"\r\n                nodeSvgShape={{shape: \"none\"}}\r\n                nodeSize={{x: 300, y: yClearance}}\r\n                onClick={e => click(e)}\r\n                onMouseOver={e => over(e)}\r\n                nodeLabelComponent={{\r\n                    render: <Card/>,\r\n                    foreignObjectWrapper: {\r\n                        style: {\r\n                            background: \"lightblue\",\r\n                            border: \"1px solid black\",\r\n                            width: width.toString() + \"px\",\r\n                            height: height.toString() + \"px\",\r\n                            x: width / -2,\r\n                            y: height / -2\r\n                        }\r\n                    }\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FamilyTree;\r\n","import React from \"react\";\r\n//import Grid from \"@mui/material/Grid\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {\r\n    queryAuthor,\r\n    queryAuthorAdvancedInfo,\r\n    fetchBookAssociatedToAuthor,\r\n    getAuthorTimeLife,\r\n    getAuthorInspiration,\r\n    getRelatedAuthor,\r\n    getFamilyTree,\r\n} from \"../services/sparqlRequests\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nimport \"./Books.css\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport ArrowBackRounded from \"@bit/mui-org.material-ui-icons.arrow-back-rounded\";\r\nimport Lottie from \"react-lottie\";\r\n\r\nimport BookResult from \"./BookResult\";\r\nimport TimelineElement from \"./Timeline\"\r\nimport AuthorResult from \"./AuthorResult\";\r\nimport FamilyTree from \"./FamilyTree\";\r\n\r\nimport {fetchBookInfo} from \"../services/sparqlRequests\";\r\nimport animationData from \"../lotties/book-loading.json\";\r\nimport useEnhancedEffect from \"@mui/utils/useEnhancedEffect\";\r\nimport Box from \"@mui/material/Box\";\r\nimport {CircularProgress} from \"@mui/material\";\r\n\r\n\r\nconst defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n        preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n};\r\n\r\nfunction Author(data) {\r\n    const navigate = useNavigate();\r\n    const {authorURI} = useParams();\r\n    const [error, setError] = useState(false);\r\n    const [authorInfo, setAuthorInfo] = useState(null);\r\n    const [advancedInfo, setAdvancedInfo] = useState(null);\r\n    const [relatedAuthor, setRelatedAuthor] = useState(null);\r\n    const [family, setFamily] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [listAwards, setListAwards] = useState(null);\r\n    const [listGenres, setListGenres] = useState(null);\r\n    const [listOccupation, setListOccupation] = useState(null);\r\n    const [authorTimeline, setAuthorTimeline] = useState(null);\r\n    const [listInterest, setListInterest] = useState(null);\r\n    const [listNotableIdea, setListNotableIdea] = useState(null);\r\n    const [listPhilosophicalSchool, setListPhilosophicalSchool] = useState(null);\r\n    const [listAcademicDiscipline, setListAcademicDiscipline] = useState(null);\r\n    const [books, setBooks] = useState([]);\r\n\r\n    const resetState = () => {\r\n        setAuthorInfo(null);\r\n        setAdvancedInfo(null);\r\n        setRelatedAuthor(null);\r\n        setFamily(null);\r\n        setListAwards(null);\r\n        setListGenres(null);\r\n        setListOccupation(null);\r\n        setListInterest(null);\r\n        setListNotableIdea(null);\r\n        setListPhilosophicalSchool(null);\r\n        setListAcademicDiscipline(null);\r\n        setAuthorTimeline(null);\r\n        setBooks([])\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        const loadAuthorInfo = async () => {\r\n            setIsLoading(true);\r\n            const response = await queryAuthor(authorURI);\r\n            if (response.length === 0) {\r\n                setError(true);\r\n            }\r\n            setAuthorInfo(response[0]);\r\n            setIsLoading(false);\r\n\r\n            // initialise arrays\r\n            if (\r\n                response[0].listAwards !== null &&\r\n                response[0].listAwards?.value !== \"\"\r\n            ) {\r\n                setListAwards(response[0].listAwards?.value.split(\";\"));\r\n            }\r\n\r\n            if (\r\n                response[0].listGenres !== null &&\r\n                response[0].listGenres?.value !== \"\"\r\n            ) {\r\n                setListGenres(response[0].listGenres?.value.split(\",\"));\r\n            }\r\n        };\r\n        loadAuthorInfo();\r\n    }, [authorURI]);\r\n\r\n    useEffect(() => {\r\n        const loadBookInfo = async () => {\r\n            setIsLoading(true);\r\n            const responseBook = await fetchBookAssociatedToAuthor(authorURI);\r\n            //console.log(responseBook);\r\n            setIsLoading(false);\r\n            setBooks(responseBook);\r\n        };\r\n        loadBookInfo();\r\n    }, [authorURI]);\r\n\r\n    useEffect(() => {\r\n        const loadAdvancedInfo = async () => {\r\n            setIsLoading(true);\r\n            const responseAdvanced = await queryAuthorAdvancedInfo(authorURI);\r\n            const authorInspiredBy = await getAuthorInspiration(authorURI, true);\r\n            const authorInfluenced = await getAuthorInspiration(authorURI, false);\r\n            responseAdvanced[0].authorInspiredBy = authorInspiredBy;\r\n            responseAdvanced[0].authorInfluenced = authorInfluenced;\r\n\r\n            setIsLoading(false);\r\n            if (\r\n                responseAdvanced[0].occupation !== null &&\r\n                responseAdvanced[0].occupation?.value !== \"\"\r\n            ) {\r\n                setListOccupation(responseAdvanced[0].occupation?.value.split(\",\"));\r\n            }\r\n            if (\r\n                responseAdvanced[0].mainInterest !== null &&\r\n                responseAdvanced[0].mainInterest?.value !== \"\"\r\n            ) {\r\n                setListInterest(responseAdvanced[0].mainInterest?.value.split(\",\"));\r\n            }\r\n            if (\r\n                responseAdvanced[0].notableIdea !== null &&\r\n                responseAdvanced[0].notableIdea?.value !== \"\"\r\n            ) {\r\n                setListNotableIdea(responseAdvanced[0].notableIdea?.value.split(\",\"));\r\n            }\r\n            if (\r\n                responseAdvanced[0].philosophicalSchool !== null &&\r\n                responseAdvanced[0].philosophicalSchool?.value !== \"\"\r\n            ) {\r\n                setListPhilosophicalSchool(\r\n                    responseAdvanced[0].philosophicalSchool?.value.split(\",\")\r\n                );\r\n            }\r\n            if (\r\n                responseAdvanced[0].academicDiscipline !== null &&\r\n                responseAdvanced[0].academicDiscipline?.value !== \"\"\r\n            ) {\r\n                setListAcademicDiscipline(\r\n                    responseAdvanced[0].academicDiscipline?.value.split(\",\")\r\n                );\r\n            }\r\n            setAdvancedInfo(responseAdvanced[0]);\r\n        };\r\n        loadAdvancedInfo();\r\n    }, [authorURI]);\r\n\r\n\r\n    useEffect(() => {\r\n        const loadTimeline = async () => {\r\n            setIsLoading(true);\r\n            const timeline = await getAuthorTimeLife(authorURI);\r\n            //console.log(\"author timeline\" + JSON.stringify(timeline));\r\n            let works, dates;\r\n            if (timeline[0].notableWorkName !== null) {\r\n                works = timeline[0].notableWorkName?.value.split(\";\");\r\n            }\r\n            if (timeline[0].releaseDate !== null) {\r\n                dates = timeline[0].releaseDate?.value.split(\";\");\r\n            }\r\n            let i = -1;\r\n            const notableWork = [];\r\n\r\n            if (authorInfo !== null) {\r\n                if (authorInfo.birthDate !== null) {\r\n                    if (authorInfo.birthDate?.value != null) {\r\n                        notableWork.push({\r\n                            \"work\": \"Born\",\r\n                            \"date\": authorInfo.birthDate?.value,\r\n                            \"type\": \"birth\"\r\n                        });\r\n                    }\r\n                }\r\n                while (works[++i]) {\r\n                    notableWork.push({\r\n                        \"work\": works[i],\r\n                        \"date\": dates[i],\r\n                        \"type\": \"work\"\r\n                    });\r\n                }\r\n                if (authorInfo !== null) {\r\n                    if (authorInfo.deathDate !== null) {\r\n                        if (authorInfo.deathDate?.value != null) {\r\n                            notableWork.push({\r\n                                \"work\": \"Died\",\r\n                                \"date\": authorInfo.deathDate?.value,\r\n                                \"type\": \"death\"\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            setAuthorTimeline(notableWork);\r\n            setIsLoading(false);\r\n        };\r\n        loadTimeline();\r\n    }, [authorInfo, authorURI]);\r\n    useEffect(() => {\r\n        const loadRelatedAuthors = async () => {\r\n            if (authorInfo !== null && advancedInfo !== null) {\r\n                let query = \"\";\r\n                if (\r\n                    listPhilosophicalSchool !== null &&\r\n                    listPhilosophicalSchool.length !== 0\r\n                ) {\r\n                    query = `?writer dbo:philosophicalSchool ?filtre.\r\n          ?filtre rdfs:label \"${listPhilosophicalSchool[0]}\"@en.`;\r\n                } else if (\r\n                    listAcademicDiscipline !== null &&\r\n                    listAcademicDiscipline !== null\r\n                ) {\r\n                    query = `?writer dbo:academicDiscipline ?filtre.\r\n          ?filtre rdfs:label \"${listAcademicDiscipline[0]}\"@en.`;\r\n        } else if (advancedInfo.movement !== null && advancedInfo.movement !== undefined) {\r\n          query = `?writer dbo:movement ?filtre.\r\n          ?filtre rdfs:label \"${advancedInfo.movement}\"@en.`;\r\n                } else if (listGenres !== null && listGenres !== null) {\r\n                    query = `?writer dbo:genre ?filtre.\r\n          ?filtre rdfs:label \"${listGenres[0]}\"@en.`;\r\n                }\r\n                if (query !== \"\") {\r\n                    const relatedAuthor = await getRelatedAuthor(authorURI, query);\r\n                    setRelatedAuthor(relatedAuthor);\r\n                } else {\r\n                    setRelatedAuthor([]);\r\n                }\r\n            }\r\n        };\r\n        loadRelatedAuthors();\r\n    }, [authorURI, authorInfo, advancedInfo]);\r\n\r\n    useEffect(() => {\r\n        const loadFamilyTree = async () => {\r\n            setIsLoading(true);\r\n            const response = await getFamilyTree(authorURI);\r\n            setFamily(response);\r\n            setIsLoading(false);\r\n        };\r\n        loadFamilyTree();\r\n    }, [authorURI]);\r\n\r\n    let splitString = (string) => {\r\n        if (string !== null) {\r\n            return string.split(\";\");\r\n        }\r\n    };\r\n\r\n\r\n    const render = () => {\r\n\r\n\r\n        return (\r\n            <div>\r\n                {error &&\r\n                <Box display={\"flex\"} alignItems={\"center\"} justifyContent={\"center\"} height={\"100vh\"}>\r\n                    <Typography fontWeight={\"bold\"} fontSize={\"30px\"}>\r\n                        Resource not available\r\n                    </Typography>\r\n                </Box>}\r\n                {!error && authorInfo === null && <Box\r\n                    display={\"flex\"}\r\n                    alignItems={\"center\"}\r\n                    justifyContent={\"center\"}\r\n                    height={\"100vh\"}\r\n                >\r\n                    <CircularProgress/>\r\n                </Box>}\r\n                {!error &&\r\n                authorInfo !== null &&\r\n                advancedInfo !== null &&\r\n                books !== null &&\r\n                relatedAuthor != null &&\r\n                authorTimeline != null && (\r\n                    <div className={\"bookContainer\"}>\r\n                        <div className={\"historyBack\"}>\r\n                            <IconButton\r\n                                onClick={() => {\r\n                                    resetState();\r\n                                    navigate(-1);\r\n                                }}\r\n                                aria-label=\"delete\"\r\n                                size=\"large\"\r\n                            >\r\n                                <ArrowBackRounded fontSize=\"inherit\"/>\r\n                            </IconButton>\r\n                        </div>\r\n                        <div className={\"titleWrapper\"}>\r\n                            <Typography component=\"h1\" variant=\"h1\">\r\n                                {authorInfo.name?.value}\r\n                            </Typography>\r\n\r\n                            <h3>\r\n                                {authorInfo.birthDate ? (\r\n                                    authorInfo.birthDate.value\r\n                                ) : (\r\n                                    <span>No information</span>\r\n                                )}&nbsp; —\r\n                                &nbsp;{authorInfo.deathDate ? (\r\n                                authorInfo.deathDate.value\r\n                            ) : (\r\n                                null\r\n                            )}\r\n                            </h3>\r\n\r\n                            <div className={\"mainContent\"}>\r\n                                <div className={\"abstractWrapper\"}>\r\n                                    <Typography component=\"h2\" variant=\"h2\">\r\n                                        Description\r\n                                    </Typography>\r\n                                    {authorInfo.description?.value}\r\n                                </div>\r\n                                <div className={\"imageWrapper\"}>\r\n                                    <img src={authorInfo.image?.value}/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div>\r\n                            {authorTimeline.length !== 0 ?\r\n                                <div className=\"timelineWrapper\">\r\n                                    <br/>\r\n                                    <div>\r\n                                        <Typography component=\"h6\" variant=\"h6\">\r\n                                            Timeline\r\n                                        </Typography>\r\n                                    </div>\r\n\r\n                                    <div>\r\n                                        <div><TimelineElement key={authorTimeline} data={authorTimeline}/></div>\r\n                                    </div>\r\n                                </div> : null}\r\n                        </div>\r\n\r\n\r\n                        <div>\r\n                            <h2>Info</h2>\r\n                            <div className={\"infoWrapper\"}>\r\n                                {advancedInfo.nationality?.value !== \"\" ? (\r\n                                    <>\r\n                                        <div>\r\n                                            <div>\r\n                                                <Typography component=\"h6\" variant=\"h6\">\r\n                                                    Nationality\r\n                                                </Typography>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div>\r\n                                            <div>{advancedInfo.nationality?.value}</div>\r\n                                        </div>\r\n                                    </>\r\n                                ) : null}\r\n                                {advancedInfo.movement ? (\r\n                                    <>\r\n                                        <div>\r\n                                            <div>\r\n                                                <Typography component=\"h6\" variant=\"h6\">\r\n                                                    Movement\r\n                                                </Typography>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div>\r\n                                            <div>{advancedInfo.movement?.value}</div>\r\n                                        </div>\r\n                                    </>\r\n                                ) : null}\r\n                                {listAwards ? (\r\n                                    <>\r\n                                        <div>\r\n                                            <Typography component=\"h6\" variant=\"h6\">\r\n                                                Awards\r\n                                            </Typography>\r\n                                        </div>\r\n                                        <div>\r\n                                            <ul>\r\n                                                {listAwards.map((award) => (\r\n                                                    <li key={award}>{award}</li>\r\n                                                ))}\r\n                                            </ul>\r\n                                        </div>\r\n                                    </>\r\n                                ) : null}\r\n                                {listOccupation ? (\r\n                                    <>\r\n                                        <div>\r\n                                            <Typography component=\"h6\" variant=\"h6\">\r\n                                                Occupation\r\n                                            </Typography>\r\n                                        </div>\r\n                                        <div>\r\n                                            <ul>\r\n                                                {listOccupation.map((award) => (\r\n                                                    <li key={award}>{award}</li>\r\n                                                ))}\r\n                                            </ul>\r\n                                        </div>\r\n                                    </>\r\n                                ) : null}\r\n                                {authorInfo.education?.value !== \"\" ? (\r\n                                    <>\r\n                                        <div>\r\n                                            <div>\r\n                                                <Typography component=\"h6\" variant=\"h6\">\r\n                                                    Education\r\n                                                </Typography>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div>\r\n                                            <div>{authorInfo.education?.value}</div>\r\n                                        </div>\r\n                                    </>\r\n                                ) : null}\r\n                                {listGenres ? (\r\n                                    <>\r\n                                        <div>\r\n                                            <Typography component=\"h6\" variant=\"h6\">\r\n                                                Literary genres\r\n                                            </Typography>\r\n                                        </div>\r\n                                        <div>\r\n                                            <ul>\r\n                                                {listGenres?.map((genre) => (\r\n                                                    <li key={genre}>{genre}</li>\r\n                                                ))}\r\n                                            </ul>\r\n                                        </div>\r\n                                    </>\r\n                                ) : null}{\" \"}\r\n                                {listInterest ? (\r\n                                    <>\r\n                                        <div>\r\n                                            <Typography component=\"h6\" variant=\"h6\">\r\n                                                Main Interest\r\n                                            </Typography>\r\n                                        </div>\r\n                                        <div>\r\n                                            <ul>\r\n                                                {listInterest.map((award) => (\r\n                                                    <li key={award}>{award}</li>\r\n                                                ))}\r\n                                            </ul>\r\n                                        </div>\r\n                                    </>\r\n                                ) : null}{\" \"}\r\n                                {listNotableIdea ? (\r\n                                    <>\r\n                                        <div>\r\n                                            <Typography component=\"h6\" variant=\"h6\">\r\n                                                Notable Idea\r\n                                            </Typography>\r\n                                        </div>\r\n                                        <div>\r\n                                            <ul>\r\n                                                {listNotableIdea.map((award) => (\r\n                                                    <li key={award}>{award}</li>\r\n                                                ))}\r\n                                            </ul>\r\n                                        </div>\r\n                                    </>\r\n                                ) : null}{\" \"}\r\n                                {listPhilosophicalSchool ? (\r\n                                    <>\r\n                                        <div>\r\n                                            <Typography component=\"h6\" variant=\"h6\">\r\n                                                Philosophical School\r\n                                            </Typography>\r\n                                        </div>\r\n                                        <div>\r\n                                            <ul>\r\n                                                {listPhilosophicalSchool.map((award) => (\r\n                                                    <li key={award}>{award}</li>\r\n                                                ))}\r\n                                            </ul>\r\n                                        </div>\r\n                                    </>\r\n                                ) : null}{\" \"}\r\n                                {listAcademicDiscipline ? (\r\n                                    <>\r\n                                        <div>\r\n                                            <Typography component=\"h6\" variant=\"h6\">\r\n                                                Academic Discipline\r\n                                            </Typography>\r\n                                        </div>\r\n                                        <div>\r\n                                            <ul>\r\n                                                {listAcademicDiscipline.map((award) => (\r\n                                                    <li key={award}>{award}</li>\r\n                                                ))}\r\n                                            </ul>\r\n                                        </div>\r\n                                    </>\r\n                                ) : null}\r\n                            </div>\r\n                            {books.length !== 0 ? (\r\n                                <>\r\n                                    <div>\r\n                                        <Typography component=\"h2\" variant=\"h2\" sx={{mb: 3}}>\r\n                                            Books by this author\r\n                                        </Typography>\r\n                                    </div>\r\n                                    <Grid\r\n                                        container\r\n                                        spacing={2}\r\n                                        direction=\"row\"\r\n                                        justifyContent=\"flex-start\"\r\n                                        alignItems=\"flex-start\"\r\n                                    >\r\n                                        {books?.map((obj, index) => {\r\n                                            let term = obj;\r\n                                            const data = {\r\n                                                title: term.name?.value,\r\n                                                author: authorInfo.name?.value,\r\n                                                img: term.imageUrl?.value,\r\n                                                releaseDate: term.releaseDate?.value,\r\n                                                bookURI: term.book?.value.split(\r\n                                                    \"http://dbpedia.org/resource/\"\r\n                                                )[1],\r\n                                            };\r\n                                            return <BookResult key={index} index={index} data={data}\r\n                                                               navigate={navigate}/>\r\n                                        })}\r\n                                    </Grid>\r\n                                </>\r\n                            ) : null}\r\n                            {advancedInfo.authorInfluenced?.length !== 0 ? (\r\n                                <>\r\n                                    <div>\r\n                                        <Typography component=\"h2\" variant=\"h2\" sx={{mb: 3}}>\r\n                                            Authors that influenced {authorInfo.name?.value}\r\n                                        </Typography>\r\n                                    </div>\r\n                                    <Grid\r\n                                        container\r\n                                        spacing={2}\r\n                                        direction=\"row\"\r\n                                        justifyContent=\"flex-start\"\r\n                                        alignItems=\"flex-start\"\r\n                                    >\r\n                                        {advancedInfo.authorInfluenced?.map((obj, index) => {\r\n                                            let term = obj;\r\n                                            const data = {\r\n                                                name: term.name?.value,\r\n                                                img: term.imageUrl?.value,\r\n                                                birthDate: term.birthDate?.value,\r\n                                                deathDate: term.deathDate?.value,\r\n                                                authorURI: term.writer?.value.split(\r\n                                                    \"http://dbpedia.org/resource/\"\r\n                                                )[1],\r\n                                            };\r\n                                            return AuthorResult(index, data, navigate, resetState);\r\n                                        })}\r\n                                    </Grid>\r\n                                </>\r\n                            ) : null}{\" \"}\r\n                            {advancedInfo.authorInspiredBy?.length !== 0 ? (\r\n                                <>\r\n                                    <div>\r\n                                        <Typography component=\"h2\" variant=\"h2\" sx={{mb: 3}}>\r\n                                            {authorInfo.name?.value} influenced these authors\r\n                                        </Typography>\r\n                                    </div>\r\n                                    <Grid\r\n                                        container\r\n                                        spacing={2}\r\n                                        direction=\"row\"\r\n                                        justifyContent=\"flex-start\"\r\n                                        alignItems=\"flex-start\"\r\n                                    >\r\n                                        {advancedInfo.authorInspiredBy?.map((obj, index) => {\r\n                                            let term = obj;\r\n                                            const data = {\r\n                                                name: term.name?.value,\r\n                                                img: term.imageUrl?.value,\r\n                                                birthDate: term.birthDate?.value,\r\n                                                deathDate: term.deathDate?.value,\r\n                                                authorURI: term.writer?.value.split(\r\n                                                    \"http://dbpedia.org/resource/\"\r\n                                                )[1],\r\n                                            };\r\n                                            return AuthorResult(index, data, navigate, resetState);\r\n                                        })}\r\n                                    </Grid>\r\n                                </>\r\n                            ) : null}{\" \"}\r\n                            {relatedAuthor.length !== 0 ? (\r\n                                <>\r\n                                    <div>\r\n                                        <Typography component=\"h2\" variant=\"h2\" sx={{mb: 3}}>\r\n                                            Authors related\r\n                                        </Typography>\r\n                                    </div>\r\n                                    <Grid\r\n                                        container\r\n                                        spacing={2}\r\n                                        direction=\"row\"\r\n                                        justifyContent=\"flex-start\"\r\n                                        alignItems=\"flex-start\"\r\n                                    >\r\n                                        {relatedAuthor?.map((obj, index) => {\r\n                                            let term = obj;\r\n                                            const data = {\r\n                                                name: term.name?.value,\r\n                                                img: term.imageUrl?.value,\r\n                                                birthDate: term.birthDate?.value,\r\n                                                deathDate: term.deathDate?.value,\r\n                                                authorURI: term.writer?.value.split(\r\n                                                    \"http://dbpedia.org/resource/\"\r\n                                                )[1],\r\n                                            };\r\n                                            return AuthorResult(index, data, navigate, resetState);\r\n                                        })}\r\n                                    </Grid>\r\n                                </>\r\n                            ) : null}\r\n                            <div>\r\n                                <Typography component=\"h2\" variant=\"h2\" sx={{mb: 3}}>\r\n                                    Children Tree\r\n                                </Typography>\r\n                            </div>\r\n                            <div>\r\n                                {\r\n                                    <FamilyTree\r\n                                        family={family}\r\n                                        authorName={authorInfo.name?.value}\r\n                                    />\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                )}\r\n            </div>\r\n        );\r\n    };\r\n    return <div>{render()}</div>;\r\n}\r\n\r\nexport default Author;\r\n","import Typography from \"@mui/material/Typography\";\r\nimport * as React from \"react\";\r\nimport HomeIcon from '@mui/icons-material/Home';\r\nimport {Box} from \"@mui/material\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nexport default function Navbar() {\r\n    let navigate = useNavigate();\r\n    return (\r\n        <Box\r\n            display={\"grid\"}\r\n            width={\"100vw\"}\r\n            height={\"37px\"}\r\n            boxShadow={\"0 2px 2px -2px rgba(0,0,0,.2)\"}\r\n            gridTemplateColumns={\"1fr 1fr 1fr\"}\r\n            alignItems={\"center\"}\r\n        >\r\n            <Box\r\n                display={\"flex\"}\r\n                alignItems={\"center\"}\r\n                paddingLeft={\"25px\"}>\r\n                <HomeIcon\r\n                    cursor={\"pointer\"}\r\n                    onClick={() => navigate(\"./\", {replace: true})}\r\n                />\r\n\r\n            </Box>\r\n            <Typography\r\n                justifySelf={\"center\"}\r\n                fontSize={\"l\"}\r\n                fontWeight={\"bold\"}\r\n            >\r\n                LibrairIf\r\n            </Typography>\r\n            <Box>\r\n\r\n            </Box>\r\n        </Box>\r\n    )\r\n}","import {useEffect} from \"react\";\r\nimport {useLocation} from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n    const {pathname} = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    return null;\r\n}","import Browser from \"./components/Browser\";\r\nimport {createTheme, ThemeProvider} from \"@mui/material/styles\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport {lightTheme} from \"./themes/lightTheme\";\r\nimport * as React from \"react\";\r\nimport {BrowserRouter as Router, Route, Routes} from \"react-router-dom\";\r\nimport Books from \"./components/Books\";\r\nimport Editor from \"./components/Editor\";\r\nimport Results from \"./components/Results\";\r\nimport Author from \"./components/Author\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport ScrollToTop from \"./components/ScrollToTop\";\r\n\r\nexport default function App() {\r\n    const theme = createTheme(lightTheme);\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <CssBaseline/>\r\n            <Router>\r\n                <div>\r\n                    <Navbar/>\r\n                    <ScrollToTop/>\r\n                    <Routes>\r\n                        <>\r\n                            <Route path=\"/\" element={<Browser/>}>\r\n                            </Route>\r\n                            <Route path=\"/bookSearch/:searchInput\" element={<Results/>}>\r\n                            </Route>\r\n                            <Route path=\"/bookInfo/:bookURI\" element={<Books/>}>\r\n                            </Route>\r\n                            <Route path=\"/authorInfo/:authorURI\" element={<Author/>}>\r\n                            </Route>\r\n                            <Route path=\"/editorInfo/:editorURI\" element={<Editor/>}>\r\n                            </Route>\r\n\r\n                        </>\r\n                    </Routes>\r\n                </div>\r\n            </Router>\r\n        </ThemeProvider>\r\n    );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\r\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossOrigin/>\r\n    <link\r\n      href=\"https://fonts.googleapis.com/css2?family=EB+Garamond:ital,wght@0,400;0,500;1,400;1,500&family=Oswald:wght@300;400;500&display=swap\"\r\n      rel=\"stylesheet\"\r\n    />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}